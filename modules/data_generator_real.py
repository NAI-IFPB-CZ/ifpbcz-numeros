"""
=============================================================================
M√ìDULO GERADOR DE DADOS REAIS - SISTEMA DASHBOARD IFPB-CZ
=============================================================================

Este m√≥dulo implementa a classe DataGeneratorReal respons√°vel por carregar,
validar e processar dados reais dos arquivos Excel institucionais para
alimenta√ß√£o do Sistema Dashboard IFPB-CZ. Garante integridade dos dados,
valida√ß√£o de estruturas e tratamento robusto de erros.

FUNCIONALIDADES PRINCIPAIS:
---------------------------
- Carregamento de dados reais de 9 arquivos Excel institucionais
- Valida√ß√£o rigorosa de estruturas de dados e colunas obrigat√≥rias
- Tratamento inteligente de valores nulos e tipos de dados
- Sistema de logs detalhado para monitoramento de carregamento
- Verifica√ß√£o de integridade de arquivos e diret√≥rios
- Processamento robusto com tratamento abrangente de exce√ß√µes

ARQUIVOS DE DADOS GERENCIADOS:
------------------------------
1. dados_assistencia.xlsx - Programas de assist√™ncia estudantil
2. dados_auditoria.xlsx - Processos de auditoria e conformidade
3. dados_ensino.xlsx - Indicadores educacionais e acad√™micos
4. dados_extensao.xlsx - Projetos e a√ß√µes de extens√£o
5. dados_mundo_trabalho.xlsx - Acompanhamento de egressos
6. dados_orcamento.xlsx - Gest√£o financeira e execu√ß√£o or√ßament√°ria
7. dados_ouvidoria.xlsx - Atendimento e manifesta√ß√µes
8. dados_pesquisa.xlsx - Produ√ß√£o cient√≠fica e projetos
9. dados_servidores.xlsx - Recursos humanos e quadro funcional

VALIDA√á√ïES IMPLEMENTADAS:
-------------------------
- Verifica√ß√£o de exist√™ncia de arquivos e diret√≥rio de dados
- Valida√ß√£o de colunas obrigat√≥rias por m√≥dulo espec√≠fico
- Convers√£o autom√°tica de tipos de dados (int, float, str)
- Tratamento inteligente de valores nulos conforme contexto
- Valida√ß√£o de consist√™ncia temporal (anos v√°lidos)
- Verifica√ß√£o de integridade referencial b√°sica

CARACTER√çSTICAS T√âCNICAS:
--------------------------
- Arquitetura orientada a objetos com m√©todos especializados
- Sistema de logs coloridos para diagn√≥stico visual
- Tratamento robusto de exce√ß√µes com mensagens informativas
- Valida√ß√£o em tempo real durante carregamento
- Suporte a m√∫ltiplas planilhas por arquivo Excel
- Flexibilidade para expans√£o de novos m√≥dulos de dados

ESTRUTURA DE DADOS:
-------------------
- Diret√≥rio padr√£o: dados/ (relativo √† raiz do projeto)
- Formato obrigat√≥rio: .xlsx (Excel 2007+)
- Estrutura de planilhas: primeira planilha ou nome espec√≠fico
- Encoding: UTF-8 com suporte a caracteres especiais
- Tipos suportados: inteiros, decimais, texto, datas

TRATAMENTO DE ERROS:
--------------------
- FileNotFoundError: arquivo ou diret√≥rio inexistente
- ValueError: estrutura de dados inv√°lida ou colunas faltantes
- Exception gen√©rica: problemas de leitura ou processamento
- Logs informativos: progresso e status de carregamento
- Valida√ß√£o pr√©via: verifica√ß√£o antes do processamento

OBJETIVO:
---------
Garantir carregamento confi√°vel e validado de dados institucionais
reais, proporcionando base s√≥lida para an√°lises e visualiza√ß√µes
precisas no dashboard, com tratamento robusto de inconsist√™ncias
e facilidade de diagn√≥stico de problemas.

DEPEND√äNCIAS:
-------------
- pandas: manipula√ß√£o e an√°lise de dados
- numpy: opera√ß√µes num√©ricas e tratamento de arrays
- os: opera√ß√µes do sistema operacional
- datetime: manipula√ß√£o de datas e timestamps
- warnings: controle de avisos do sistema

AUTOR: Sistema Dashboard IFPB-CZ - NAI
DATA: 2024
=============================================================================
"""

import pandas as pd
import numpy as np
import os
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

class DataGeneratorReal:
    """
    Classe geradora de dados reais do Sistema Dashboard IFPB-CZ.
    
    Esta classe centraliza o carregamento, valida√ß√£o e processamento de dados
    institucionais reais a partir de arquivos Excel padronizados, garantindo
    integridade, consist√™ncia e tratamento robusto de erros para alimenta√ß√£o
    confi√°vel do sistema de visualiza√ß√µes.
    
    RESPONSABILIDADES PRINCIPAIS:
    - Gerenciamento de 9 arquivos Excel institucionais
    - Valida√ß√£o rigorosa de estruturas e tipos de dados
    - Tratamento inteligente de valores nulos e inconsist√™ncias
    - Sistema de logs detalhado para monitoramento
    - Convers√£o autom√°tica de tipos de dados conforme especifica√ß√£o
    - Verifica√ß√£o de integridade referencial b√°sica
    
    ARQUIVOS GERENCIADOS:
    - dados_assistencia.xlsx: programas assistenciais e benef√≠cios
    - dados_auditoria.xlsx: auditorias e recomenda√ß√µes
    - dados_ensino.xlsx: indicadores educacionais e acad√™micos
    - dados_extensao.xlsx: projetos extensionistas e comunidade
    - dados_mundo_trabalho.xlsx: inser√ß√£o profissional de egressos
    - dados_orcamento.xlsx: execu√ß√£o financeira e or√ßament√°ria
    - dados_ouvidoria.xlsx: manifesta√ß√µes e atendimento
    - dados_pesquisa.xlsx: produ√ß√£o cient√≠fica e projetos
    - dados_servidores.xlsx: recursos humanos e quadro funcional
    
    VALIDA√á√ïES IMPLEMENTADAS:
    - Exist√™ncia de arquivos e diret√≥rio de dados
    - Colunas obrigat√≥rias espec√≠ficas por m√≥dulo
    - Tipos de dados apropriados (int, float, str)
    - Tratamento de valores nulos contextualizado
    - Consist√™ncia temporal e referencial
    
    CARACTER√çSTICAS T√âCNICAS:
    - Logs coloridos para diagn√≥stico visual (‚úÖ‚ùåüìä)
    - Tratamento robusto de exce√ß√µes
    - Flexibilidade para m√∫ltiplas planilhas
    - Suporte a encoding UTF-8
    - Arquitetura extens√≠vel para novos m√≥dulos
    
    ESTRUTURA DE ARQUIVOS NECESS√ÅRIA:
    - dados/dados_assistencia.xlsx
    - dados/dados_auditoria.xlsx
    - dados/dados_ensino.xlsx
    - dados/dados_extensao.xlsx
    - dados/dados_mundo_trabalho.xlsx
    - dados/dados_orcamento.xlsx
    - dados/dados_ouvidoria.xlsx
    - dados/dados_pesquisa.xlsx
    - dados/dados_servidores.xlsx
    
    ATRIBUTOS:
    ----------
    dados_directory : str
        Caminho do diret√≥rio contendo os arquivos de dados
    data_atualizacao : str
        Timestamp da √∫ltima atualiza√ß√£o/carregamento
        
    M√âTODOS PRINCIPAIS:
    ------------------
    gerar_dados_[modulo]() : DataFrame
        M√©todos especializados para cada m√≥dulo de dados
    _verificar_arquivo() : str
        Valida√ß√£o de exist√™ncia de arquivos
    _ler_excel() : DataFrame
        Carregamento seguro de planilhas Excel
    _validar_colunas() : None
        Valida√ß√£o de estrutura de colunas obrigat√≥rias
    """
    
    def __init__(self):
        """
        Inicializa√ß√£o da classe DataGeneratorReal.
        
        Configura diret√≥rio de dados, timestamp de atualiza√ß√£o e verifica
        exist√™ncia da estrutura b√°sica de arquivos necess√°ria para
        funcionamento do sistema.
        
        CONFIGURA√á√ïES INICIAIS:
        - Define diret√≥rio padr√£o 'dados/' para arquivos Excel
        - Gera timestamp atual para controle de atualiza√ß√£o
        - Verifica exist√™ncia do diret√≥rio de dados
        
        VALIDA√á√ïES REALIZADAS:
        - Exist√™ncia do diret√≥rio 'dados/' na raiz do projeto
        - Permiss√µes de leitura no diret√≥rio especificado
        
        EXCE√á√ïES LAN√áADAS:
        ------------------
        FileNotFoundError
            Quando diret√≥rio 'dados/' n√£o existe ou n√£o √© acess√≠vel
            
        ATRIBUTOS INICIALIZADOS:
        -----------------------
        dados_directory : str
            Caminho relativo para o diret√≥rio de dados ("dados")
        data_atualizacao : str
            Timestamp formatado da inicializa√ß√£o (DD/MM/AAAA √†s HH:MM)
        """
        # ============= CONFIGURA√á√ÉO DE DIRET√ìRIOS E CONTROLE TEMPORAL =============
        # Define diret√≥rio padr√£o para arquivos Excel institucionais
        self.dados_directory = "dados"
        
        # Gera timestamp para controle de atualiza√ß√£o dos dados
        self.data_atualizacao = datetime.now().strftime("%d/%m/%Y √†s %H:%M")
        
        # ============= VALIDA√á√ÉO DA ESTRUTURA DE DIRET√ìRIOS =============
        # Verifica exist√™ncia do diret√≥rio de dados obrigat√≥rio
        # Interrompe execu√ß√£o se estrutura b√°sica n√£o estiver presente
        # Verificar se o diret√≥rio existe
        if not os.path.exists(self.dados_directory):
            raise FileNotFoundError(f"Diret√≥rio '{self.dados_directory}' n√£o encontrado!")
    
    def _verificar_arquivo(self, nome_arquivo):
        """
        Verifica√ß√£o de exist√™ncia e acessibilidade de arquivo espec√≠fico.
        
        Valida se arquivo Excel especificado existe no diret√≥rio de dados
        e est√° acess√≠vel para leitura, construindo caminho completo para
        carregamento posterior.
        
        VALIDA√á√ïES REALIZADAS:
        - Exist√™ncia f√≠sica do arquivo no diret√≥rio dados/
        - Acessibilidade para opera√ß√µes de leitura
        - Constru√ß√£o de caminho absoluto correto
        
        PAR√ÇMETROS:
        -----------
        nome_arquivo : str
            Nome do arquivo Excel a ser verificado (ex: "dados_ensino.xlsx")
            
        RETORNO:
        --------
        str
            Caminho completo para o arquivo validado
            
        EXCE√á√ïES LAN√áADAS:
        ------------------
        FileNotFoundError
            Quando arquivo especificado n√£o existe no diret√≥rio dados/
            
        EXEMPLO DE USO:
        --------------
        caminho = self._verificar_arquivo("dados_ensino.xlsx")
        # Retorna: "dados/dados_ensino.xlsx"
        """
        # ============= CONSTRU√á√ÉO E VALIDA√á√ÉO DE CAMINHO DE ARQUIVO =============
        # Combina diret√≥rio base com nome do arquivo para caminho completo
        caminho = os.path.join(self.dados_directory, nome_arquivo)
        
        # ============= VERIFICA√á√ÉO DE EXIST√äNCIA F√çSICA DO ARQUIVO =============
        # Valida se arquivo existe fisicamente no sistema de arquivos
        # Interrompe processamento se arquivo obrigat√≥rio est√° ausente
        if not os.path.exists(caminho):
            raise FileNotFoundError(f"Arquivo '{nome_arquivo}' n√£o encontrado em '{self.dados_directory}'!")
        return caminho
    
    def _ler_excel(self, nome_arquivo, sheet_name=0):
        """
        Carregamento seguro de arquivo Excel com tratamento de erros.
        
        Realiza leitura robusta de planilha Excel com valida√ß√£o pr√©via,
        tratamento de exce√ß√µes e logging informativo do processo de
        carregamento para monitoramento do sistema.
        
        PROCESSO DE CARREGAMENTO:
        1. Verifica√ß√£o de exist√™ncia do arquivo
        2. Leitura da planilha especificada
        3. Valida√ß√£o b√°sica do DataFrame resultante
        4. Logging do resultado (sucesso/falha)
        
        TRATAMENTO DE ERROS:
        - Arquivo inexistente: FileNotFoundError
        - Planilha inv√°lida: Exception espec√≠fica do pandas
        - Formato incorreto: ValueError impl√≠cito
        - Problemas de encoding: UnicodeDecodeError impl√≠cito
        
        PAR√ÇMETROS:
        -----------
        nome_arquivo : str
            Nome do arquivo Excel (ex: "dados_ensino.xlsx")
        sheet_name : int ou str, opcional
            √çndice ou nome da planilha (padr√£o: 0 - primeira planilha)
            
        RETORNO:
        --------
        pandas.DataFrame
            DataFrame contendo dados da planilha carregada
            
        EXCE√á√ïES LAN√áADAS:
        ------------------
        Exception
            Qualquer erro durante carregamento √© capturado e re-lan√ßado
            com informa√ß√µes espec√≠ficas para diagn√≥stico
            
        LOGGING REALIZADO:
        -----------------
        Sucesso: "‚úÖ Arquivo 'nome.xlsx' carregado com sucesso: N registros"
        Falha: "‚ùå Erro ao carregar 'nome.xlsx': descri√ß√£o do erro"
        """
        # ============= CARREGAMENTO SEGURO COM TRATAMENTO DE EXCE√á√ïES =============
        try:
            # Verifica exist√™ncia do arquivo antes da tentativa de leitura
            caminho = self._verificar_arquivo(nome_arquivo)
            
            # Carrega planilha Excel com pandas usando configura√ß√µes padr√£o
            df = pd.read_excel(caminho, sheet_name=sheet_name)
            
            # ============= LOGGING DE SUCESSO COM INFORMA√á√ïES ESTAT√çSTICAS =============
            # Registra carregamento bem-sucedido com contagem de registros
            print(f"‚úÖ Arquivo '{nome_arquivo}' carregado com sucesso: {len(df)} registros")
            return df
            
        except Exception as e:
            # ============= LOGGING DE ERRO COM DETALHES PARA DIAGN√ìSTICO =============
            # Registra falha no carregamento com descri√ß√£o espec√≠fica do erro
            print(f"‚ùå Erro ao carregar '{nome_arquivo}': {str(e)}")
            raise
    
    def _validar_colunas(self, df, colunas_obrigatorias, nome_modulo):
        """
        Valida√ß√£o rigorosa de estrutura de colunas obrigat√≥rias.
        
        Verifica se DataFrame carregado possui todas as colunas obrigat√≥rias
        especificadas para o m√≥dulo, garantindo compatibilidade com
        processamento posterior e gera√ß√£o de visualiza√ß√µes.
        
        VALIDA√á√ïES REALIZADAS:
        - Presen√ßa de todas as colunas obrigat√≥rias
        - Correspond√™ncia exata de nomes (case-sensitive)
        - Identifica√ß√£o espec√≠fica de colunas faltantes
        
        PROCESSO DE VALIDA√á√ÉO:
        1. Compara√ß√£o entre colunas existentes e obrigat√≥rias
        2. Identifica√ß√£o de colunas faltantes
        3. Gera√ß√£o de erro espec√≠fico se h√° colunas ausentes
        4. Logging de valida√ß√£o bem-sucedida
        
        PAR√ÇMETROS:
        -----------
        df : pandas.DataFrame
            DataFrame a ser validado
        colunas_obrigatorias : list[str]
            Lista de nomes de colunas obrigat√≥rias
        nome_modulo : str
            Nome do m√≥dulo para identifica√ß√£o em logs e erros
            
        RETORNO:
        --------
        None
            Fun√ß√£o de valida√ß√£o sem retorno expl√≠cito
            
        EXCE√á√ïES LAN√áADAS:
        ------------------
        ValueError
            Quando uma ou mais colunas obrigat√≥rias est√£o ausentes
            Inclui lista espec√≠fica das colunas faltantes
            
        LOGGING REALIZADO:
        -----------------
        Sucesso: "‚úÖ Valida√ß√£o de colunas do m√≥dulo [nome]: OK"
        Falha: "‚ùå Colunas faltantes em [nome]: [lista_colunas]"
        
        EXEMPLO DE USO:
        --------------
        colunas = ['ano', 'campus', 'curso', 'matriculados']
        self._validar_colunas(df_ensino, colunas, "Ensino")
        """
        # ============= IDENTIFICA√á√ÉO DE COLUNAS FALTANTES =============
        # Compara colunas obrigat√≥rias com colunas presentes no DataFrame
        # Cria lista espec√≠fica de colunas ausentes para diagn√≥stico
        colunas_faltantes = [col for col in colunas_obrigatorias if col not in df.columns]
        
        # ============= VALIDA√á√ÉO E TRATAMENTO DE ERROS =============
        # Interrompe processamento se h√° colunas obrigat√≥rias ausentes
        # Fornece informa√ß√µes espec√≠ficas sobre colunas faltantes
        if colunas_faltantes:
            raise ValueError(f"‚ùå Colunas faltantes em {nome_modulo}: {colunas_faltantes}")
        
        # ============= LOGGING DE VALIDA√á√ÉO BEM-SUCEDIDA =============
        # Confirma que estrutura de dados est√° correta para processamento
        print(f"‚úÖ Valida√ß√£o de colunas do m√≥dulo {nome_modulo}: OK")
    
    def gerar_dados_extensao(self):
        """
        Carregamento e processamento de dados reais de extens√£o universit√°ria.
        
        Realiza carregamento do arquivo dados_extensao.xlsx contendo informa√ß√µes
        sobre projetos extensionistas, est√°gios, acessibilidade e inclus√£o,
        com valida√ß√£o rigorosa de estrutura e tratamento de inconsist√™ncias.
        
        DADOS PROCESSADOS:
        - Projetos de extens√£o por ano e modalidade
        - Est√°gios conclu√≠dos e acompanhamento profissional
        - Ingressantes PNE (Pessoas com Necessidades Espec√≠ficas)
        - Tipos de necessidades e adapta√ß√µes realizadas
        - Distribui√ß√£o por g√™nero e unidades institucionais
        
        ESTRUTURA ESPERADA DA PLANILHA dados_extensao.xlsx:
        - ano: int (ex: 2023, 2024, 2025)
        - unidade: str (ex: "IFPB - Campus Campina Grande")
        - curso: str (ex: "T√©cnico em Inform√°tica")
        - modalidade: str (ex: "Presencial", "EAD")
        - genero: str (ex: "Masculino", "Feminino", "Outro")
        - estagios_concluidos: int (n√∫mero de est√°gios conclu√≠dos)
        - pne_ingressantes: int (n√∫mero de ingressantes PNE)
        - tipo_necessidade: str (ex: "F√≠sica", "Visual", "Auditiva", "Intelectual")
        
        VALIDA√á√ïES E TRATAMENTOS:
        - Verifica√ß√£o de colunas obrigat√≥rias
        - Tratamento de valores nulos (substitui√ß√£o por 0 quando apropriado)
        - Convers√£o de tipos de dados (int para campos num√©ricos)
        - Valida√ß√£o temporal (anos n√£o podem estar vazios)
        
        RETORNO:
        --------
        pandas.DataFrame
            DataFrame processado com dados de extens√£o validados e limpos
            
        EXCE√á√ïES POSS√çVEIS:
        ------------------
        FileNotFoundError : arquivo dados_extensao.xlsx n√£o encontrado
        ValueError : estrutura de dados inv√°lida ou colunas faltantes
        Exception : problemas gerais de carregamento ou processamento
        
        LOGGING REALIZADO:
        -----------------
        "üìä Carregando dados reais de extens√£o..."
        "‚úÖ Dados de extens√£o carregados: N registros de AAAA a AAAA"
        """
        # ============= IN√çCIO DO PROCESSO DE CARREGAMENTO =============
        print("üìä Carregando dados reais de extens√£o...")
        
        # ============= CARREGAMENTO DO ARQUIVO EXCEL =============
        # Utiliza m√©todo seguro de leitura com tratamento de erros
        # Carregar dados do Excel
        df = self._ler_excel("dados_extensao.xlsx")
        
        # ============= VALIDA√á√ÉO DE ESTRUTURA DE COLUNAS =============
        # Define e valida colunas obrigat√≥rias espec√≠ficas do m√≥dulo extens√£o
        # Garante compatibilidade com processamento posterior
        # Validar colunas obrigat√≥rias
        colunas_obrigatorias = [
            'ano', 'unidade', 'curso', 'modalidade', 'genero',
            'estagios_concluidos', 'pne_ingressantes', 'tipo_necessidade'
        ]
        self._validar_colunas(df, colunas_obrigatorias, "Extens√£o")
        
        # ============= VALIDA√á√ïES ESPEC√çFICAS E TRATAMENTO DE DADOS =============
        # Valida√ß√µes adicionais
        if df['ano'].isna().any():
            raise ValueError("‚ùå Coluna 'ano' n√£o pode ter valores vazios")
        
        # Tratamento inteligente de valores nulos em campos num√©ricos
        # Substitui NaN por 0 para manter consist√™ncia estat√≠stica
        if df['estagios_concluidos'].isna().any():
            df['estagios_concluidos'] = df['estagios_concluidos'].fillna(0)
        
        if df['pne_ingressantes'].isna().any():
            df['pne_ingressantes'] = df['pne_ingressantes'].fillna(0)
        
        # ============= CONVERS√ÉO DE TIPOS DE DADOS =============
        # Garante tipos corretos para processamento num√©rico e visualiza√ß√µes
        # Converter tipos de dados
        df['ano'] = df['ano'].astype(int)
        df['estagios_concluidos'] = df['estagios_concluidos'].astype(int)
        df['pne_ingressantes'] = df['pne_ingressantes'].astype(int)
        
        # ============= LOGGING DE CARREGAMENTO FINALIZADO =============
        # Confirma sucesso com estat√≠sticas b√°sicas dos dados carregados
        print(f"‚úÖ Dados de extens√£o carregados: {len(df)} registros de {df['ano'].min()} a {df['ano'].max()}")
        return df
    
    def gerar_dados_ensino(self):
        """
        Carregamento e processamento de dados reais de ensino e indicadores acad√™micos.
        
        Processa arquivo dados_ensino.xlsx contendo informa√ß√µes sobre matr√≠culas,
        forma√ß√£o, evas√£o e indicadores educacionais fundamentais para
        acompanhamento da gest√£o acad√™mica institucional.
        
        DADOS PROCESSADOS:
        - Matr√≠culas por curso, modalidade e per√≠odo
        - Formandos e taxa de conclus√£o
        - Desist√™ncias e transfer√™ncias (indicadores de evas√£o)
        - Distribui√ß√£o por campus e modalidades de ensino
        
        ESTRUTURA ESPERADA DA PLANILHA dados_ensino.xlsx:
        - ano: int
        - campus: str
        - curso: str
        - modalidade: str
        - matriculados: int
        - formados: int
        - desistentes: int
        - transferidos: int
        
        TRATAMENTOS REALIZADOS:
        - Preenchimento de valores NaN com 0 para campos num√©ricos
        - Convers√£o autom√°tica de tipos de dados
        - Valida√ß√£o de integridade estrutural
        
        RETORNO:
        --------
        pandas.DataFrame
            DataFrame com dados educacionais processados e validados
        """
        # ============= IN√çCIO DO CARREGAMENTO DE DADOS EDUCACIONAIS =============
        print("üìä Carregando dados reais de ensino...")
        
        # ============= CARREGAMENTO E VALIDA√á√ÉO ESTRUTURAL =============
        df = self._ler_excel("dados_ensino.xlsx")
        
        colunas_obrigatorias = [
            'ano', 'campus', 'curso', 'modalidade',
            'matriculados', 'formados', 'desistentes', 'transferidos'
        ]
        self._validar_colunas(df, colunas_obrigatorias, "Ensino")
        
        # ============= TRATAMENTO DE DADOS NUM√âRICOS =============
        # Preencher valores NaN com 0 para colunas num√©ricas
        colunas_numericas = ['matriculados', 'formados', 'desistentes', 'transferidos']
        for col in colunas_numericas:
            df[col] = df[col].fillna(0).astype(int)
        
        df['ano'] = df['ano'].astype(int)
        
        # ============= CONFIRMA√á√ÉO DE CARREGAMENTO =============
        print(f"‚úÖ Dados de ensino carregados: {len(df)} registros")
        return df
    
    def gerar_dados_pesquisa(self):
        """
        Carregamento e processamento de dados reais de pesquisa e produ√ß√£o cient√≠fica.
        
        Processa arquivo dados_pesquisa.xlsx contendo informa√ß√µes sobre produ√ß√£o
        acad√™mica, publica√ß√µes cient√≠ficas e distribui√ß√£o por √°reas do conhecimento
        para acompanhamento da atividade de pesquisa institucional.
        
        DADOS PROCESSADOS:
        - Publica√ß√µes por tipo (artigos, cap√≠tulos, trabalhos em eventos)
        - Distribui√ß√£o por √°reas do conhecimento
        - Quantifica√ß√£o de produ√ß√£o cient√≠fica por per√≠odo
        - Vincula√ß√£o com servidores/pesquisadores (opcional)
        
        ESTRUTURA ESPERADA DA PLANILHA dados_pesquisa.xlsx:
        - ano: int
        - tipo_publicacao: str (ex: "Artigos", "Cap√≠tulos de Livros", "Trabalhos em Eventos")
        - quantidade: int
        - area_conhecimento: str
        - servidor: str (opcional)
        
        TRATAMENTOS REALIZADOS:
        - Convers√£o de tipos de dados num√©ricos
        - Preenchimento de quantidades nulas com 0
        - Valida√ß√£o de consist√™ncia temporal
        
        RETORNO:
        --------
        pandas.DataFrame
            DataFrame com dados de pesquisa processados e validados
        """
        # ============= IN√çCIO DO CARREGAMENTO DE DADOS DE PESQUISA =============
        print("üìä Carregando dados reais de pesquisa...")
        
        # ============= CARREGAMENTO E VALIDA√á√ÉO ESTRUTURAL =============
        df = self._ler_excel("dados_pesquisa.xlsx")
        
        colunas_obrigatorias = ['ano', 'tipo_publicacao', 'quantidade', 'area_conhecimento']
        self._validar_colunas(df, colunas_obrigatorias, "Pesquisa")
        
        # ============= CONVERS√ÉO E TRATAMENTO DE DADOS =============
        df['ano'] = df['ano'].astype(int)
        df['quantidade'] = df['quantidade'].fillna(0).astype(int)
        
        # ============= CONFIRMA√á√ÉO DE CARREGAMENTO =============
        print(f"‚úÖ Dados de pesquisa carregados: {len(df)} registros")
        return df
    
    def gerar_dados_assistencia(self):
        """
        Carregamento e processamento de dados reais de assist√™ncia estudantil.
        
        Processa dados sobre programas assistenciais, benef√≠cios concedidos,
        valores investidos e perfil dos benefici√°rios para acompanhamento
        das pol√≠ticas de perman√™ncia e √™xito estudantil.
        
        ESTRUTURA ESPERADA:
        - ano, campus, auxilio_tipo, beneficiarios, valor_total
        
        RETORNO:
        --------
        pandas.DataFrame
            DataFrame com dados de assist√™ncia processados
        """
        # ============= CARREGAMENTO DE DADOS ASSISTENCIAIS =============
        print("üìä Carregando dados reais de assist√™ncia estudantil...")
        
        df = self._ler_excel("dados_assistencia.xlsx")
        
        colunas_obrigatorias = ['ano', 'campus', 'auxilio_tipo', 'beneficiarios', 'valor_total']
        self._validar_colunas(df, colunas_obrigatorias, "Assist√™ncia")
        
        # ============= TRATAMENTO DE DADOS NUM√âRICOS =============
        df['ano'] = df['ano'].astype(int)
        df['beneficiarios'] = df['beneficiarios'].fillna(0).astype(int)
        df['valor_total'] = df['valor_total'].fillna(0).astype(float)
        
        print(f"‚úÖ Dados de assist√™ncia carregados: {len(df)} registros")
        return df
    
    def gerar_dados_auditoria(self):
        """
        Carregamento e processamento de dados reais de auditoria e conformidade.
        
        Processa informa√ß√µes sobre auditorias realizadas, recomenda√ß√µes emitidas
        e status de conformidade para acompanhamento da gest√£o institucional.
        
        RETORNO:
        --------
        pandas.DataFrame
            DataFrame com dados de auditoria processados
        """
        # ============= CARREGAMENTO DE DADOS DE AUDITORIA =============
        print("üìä Carregando dados reais de auditoria...")
        
        df = self._ler_excel("dados_auditoria.xlsx")
        
        colunas_obrigatorias = ['ano', 'tipo_auditoria', 'numero_auditorias', 'recomendacoes']
        self._validar_colunas(df, colunas_obrigatorias, "Auditoria")
        
        # ============= CONVERS√ÉO DE TIPOS DE DADOS =============
        df['ano'] = df['ano'].astype(int)
        df['numero_auditorias'] = df['numero_auditorias'].fillna(0).astype(int)
        df['recomendacoes'] = df['recomendacoes'].fillna(0).astype(int)
        
        print(f"‚úÖ Dados de auditoria carregados: {len(df)} registros")
        return df
    
    def gerar_dados_mundo_trabalho(self):
        """
        Carregamento e processamento de dados reais de inser√ß√£o no mundo do trabalho.
        
        Processa informa√ß√µes sobre empregabilidade de egressos, sal√°rios m√©dios
        e acompanhamento da inser√ß√£o profissional por curso e campus.
        
        RETORNO:
        --------
        pandas.DataFrame
            DataFrame com dados de mundo do trabalho processados
        """
        # ============= CARREGAMENTO DE DADOS DE EGRESSOS =============
        print("üìä Carregando dados reais de mundo do trabalho...")
        
        df = self._ler_excel("dados_mundo_trabalho.xlsx")
        
        colunas_obrigatorias = ['ano', 'campus', 'curso', 'empregabilidade', 'salario_medio']
        self._validar_colunas(df, colunas_obrigatorias, "Mundo do Trabalho")
        
        # ============= TRATAMENTO DE DADOS FINANCEIROS =============
        df['ano'] = df['ano'].astype(int)
        df['empregabilidade'] = df['empregabilidade'].fillna(0).astype(float)
        df['salario_medio'] = df['salario_medio'].fillna(0).astype(float)
        
        print(f"‚úÖ Dados de mundo do trabalho carregados: {len(df)} registros")
        return df
    
    def gerar_dados_orcamento(self):
        """
        Carregamento e processamento de dados reais de execu√ß√£o or√ßament√°ria.
        
        Processa informa√ß√µes financeiras sobre or√ßamento planejado versus
        executado por categorias para acompanhamento da gest√£o financeira.
        
        RETORNO:
        --------
        pandas.DataFrame
            DataFrame com dados or√ßament√°rios processados
        """
        # ============= CARREGAMENTO DE DADOS OR√áAMENT√ÅRIOS =============
        print("üìä Carregando dados reais de or√ßamento...")
        
        df = self._ler_excel("dados_orcamento.xlsx")
        
        colunas_obrigatorias = ['ano', 'categoria', 'valor_orcado', 'valor_executado']
        self._validar_colunas(df, colunas_obrigatorias, "Or√ßamento")
        
        # ============= TRATAMENTO DE VALORES FINANCEIROS =============
        df['ano'] = df['ano'].astype(int)
        df['valor_orcado'] = df['valor_orcado'].fillna(0).astype(float)
        df['valor_executado'] = df['valor_executado'].fillna(0).astype(float)
        
        print(f"‚úÖ Dados de or√ßamento carregados: {len(df)} registros")
        return df
    
    def gerar_dados_ouvidoria(self):
        """
        Carregamento e processamento de dados reais de ouvidoria e atendimento.
        
        Processa manifesta√ß√µes recebidas, tipos de demandas e status de
        atendimento para acompanhamento da qualidade dos servi√ßos.
        
        RETORNO:
        --------
        pandas.DataFrame
            DataFrame com dados de ouvidoria processados
        """
        # ============= CARREGAMENTO DE DADOS DE OUVIDORIA =============
        print("üìä Carregando dados reais de ouvidoria...")
        
        df = self._ler_excel("dados_ouvidoria.xlsx")
        
        colunas_obrigatorias = ['ano', 'tipo_manifestacao', 'quantidade', 'status']
        self._validar_colunas(df, colunas_obrigatorias, "Ouvidoria")
        
        # ============= TRATAMENTO DE DADOS DE ATENDIMENTO =============
        df['ano'] = df['ano'].astype(int)
        df['quantidade'] = df['quantidade'].fillna(0).astype(int)
        
        print(f"‚úÖ Dados de ouvidoria carregados: {len(df)} registros")
        return df
    
    def gerar_dados_servidores(self):
        """
        Carregamento e processamento de dados reais de recursos humanos.
        
        Processa informa√ß√µes sobre quadro de servidores, distribui√ß√£o por
        categorias, g√™nero e campus para acompanhamento da gest√£o de pessoas.
        
        RETORNO:
        --------
        pandas.DataFrame
            DataFrame com dados de servidores processados
        """
        # ============= CARREGAMENTO DE DADOS DE RECURSOS HUMANOS =============
        print("üìä Carregando dados reais de servidores...")
        
        df = self._ler_excel("dados_servidores.xlsx")
        
        colunas_obrigatorias = ['ano', 'campus', 'categoria', 'quantidade', 'genero']
        self._validar_colunas(df, colunas_obrigatorias, "Servidores")
        
        # ============= TRATAMENTO DE DADOS DE PESSOAL =============
        df['ano'] = df['ano'].astype(int)
        df['quantidade'] = df['quantidade'].fillna(0).astype(int)
        
        print(f"‚úÖ Dados de servidores carregados: {len(df)} registros")
        return df

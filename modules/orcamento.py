# ==============================================================================
# M√ìDULO DE OR√áAMENTO - SISTEMA DASHBOARD IFPB-CZ
# ==============================================================================
"""
M√≥dulo respons√°vel pela an√°lise e visualiza√ß√£o de dados or√ßament√°rios da institui√ß√£o.

FUNCIONALIDADES PRINCIPAIS:
‚Ä¢ Monitoramento de dota√ß√£o or√ßament√°ria, valores empenhados e pagos
‚Ä¢ An√°lise por categorias or√ßament√°rias (pessoal, custeio, investimentos, etc.)
‚Ä¢ Visualiza√ß√£o de evolu√ß√£o temporal dos gastos p√∫blicos
‚Ä¢ C√°lculo de efici√™ncia or√ßament√°ria e percentuais de execu√ß√£o
‚Ä¢ Compara√ß√£o entre diferentes unidades e anos
‚Ä¢ Filtros din√¢micos para an√°lise detalhada

DADOS PROCESSADOS:
‚Ä¢ Dota√ß√£o or√ßament√°ria autorizada por categoria
‚Ä¢ Valores empenhados (comprometidos) por per√≠odo
‚Ä¢ Valores efetivamente pagos pela institui√ß√£o
‚Ä¢ Distribui√ß√£o por unidades organizacionais
‚Ä¢ Hist√≥rico temporal de execu√ß√£o or√ßament√°ria

VISUALIZA√á√ïES GERADAS:
‚Ä¢ KPIs principais de execu√ß√£o or√ßament√°ria
‚Ä¢ Painel de gastos por categoria com √≠cones visuais
‚Ä¢ Gr√°ficos comparativos de dota√ß√£o vs empenhado vs pago
‚Ä¢ Evolu√ß√£o temporal dos diferentes tipos or√ßament√°rios
‚Ä¢ An√°lise de efici√™ncia com percentuais de execu√ß√£o

CATEGORIAS OR√áAMENT√ÅRIAS:
‚Ä¢ Pessoal e Encargos Sociais: folha de pagamento e benef√≠cios
‚Ä¢ Custeio: despesas operacionais e manuten√ß√£o corrente
‚Ä¢ Investimentos: aquisi√ß√µes de bens de capital
‚Ä¢ Manuten√ß√£o: conserva√ß√£o de bens e equipamentos
‚Ä¢ Equipamentos: aquisi√ß√£o de materiais permanentes
‚Ä¢ Obras: constru√ß√µes e reformas de infraestrutura

TECNOLOGIAS UTILIZADAS:
‚Ä¢ Streamlit para interface web responsiva
‚Ä¢ Plotly para gr√°ficos interativos avan√ßados
‚Ä¢ Pandas para manipula√ß√£o de dados financeiros
‚Ä¢ Formata√ß√£o monet√°ria brasileira (R$)
‚Ä¢ Sistema de cores institucional para categoriza√ß√£o
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from .utils import display_header_with_logo, display_footer

def orcamento_module(data_gen):
    """
    M√≥dulo principal de an√°lise or√ßament√°ria institucional.
    
    Este m√≥dulo processa e apresenta informa√ß√µes financeiras da institui√ß√£o,
    incluindo dota√ß√£o or√ßament√°ria, valores empenhados, pagos e an√°lises
    de efici√™ncia de execu√ß√£o or√ßament√°ria.
    
    Args:
        data_gen: Gerador de dados para obten√ß√£o das informa√ß√µes or√ßament√°rias
    
    Returns:
        None: Renderiza a interface Streamlit com an√°lises financeiras
    """
    
    # ==============================================================================
    # INICIALIZA√á√ÉO E CONFIGURA√á√ÉO
    # ==============================================================================
    
    # Exibir cabe√ßalho institucional com logo
    display_header_with_logo("Or√ßamento")
    
    # ==============================================================================
    # CARREGAMENTO E PROCESSAMENTO DOS DADOS OR√áAMENT√ÅRIOS
    # ==============================================================================
    
    # Gerar dados or√ßament√°rios (real ou simulado conforme configura√ß√£o)
    dados_orcamento = data_gen.gerar_dados_orcamento()
    
    # Filtrar dados para o ano atual (2025) para c√°lculo dos KPIs principais
    dados_2025 = dados_orcamento[dados_orcamento['ano'] == 2025]
    
    # ==============================================================================
    # C√ÅLCULO DOS KPIS OR√áAMENT√ÅRIOS PRINCIPAIS
    # ==============================================================================
    
    # KPI 1: Total da dota√ß√£o or√ßament√°ria autorizada
    total_dotacao = dados_2025['dotacao'].sum()
    
    # KPI 2: Total de valores empenhados (comprometidos)
    total_empenhado = dados_2025['empenhado'].sum()
    
    # KPI 3: Total de valores efetivamente pagos
    total_pago = dados_2025['pago'].sum()
    
    # ==============================================================================
    # EXIBI√á√ÉO DOS KPIS OR√áAMENT√ÅRIOS
    # ==============================================================================
    
    # Cart√µes de KPI em layout de tr√™s colunas
    col1, col2, col3 = st.columns(3)
    
    # KPI Card 1: Dota√ß√£o Or√ßament√°ria
    with col1:
        st.markdown(f"""
        <div class="kpi-container">
            <div class="kpi-title">OR√áAMENTO DOTA√á√ÉO</div>
            <div class="kpi-value">{data_gen.formatar_valor_monetario(total_dotacao)}</div>
        </div>
        """, unsafe_allow_html=True)
    
    # KPI Card 2: Or√ßamento Empenhado
    with col2:
        st.markdown(f"""
        <div class="kpi-container">
            <div class="kpi-title">OR√áAMENTO EMPENHADO</div>
            <div class="kpi-value">{data_gen.formatar_valor_monetario(total_empenhado)}</div>
        </div>
        """, unsafe_allow_html=True)
    
    # KPI Card 3: Or√ßamento Pago
    with col3:
        st.markdown(f"""
        <div class="kpi-container">
            <div class="kpi-title">OR√áAMENTO PAGO</div>
            <div class="kpi-value">{data_gen.formatar_valor_monetario(total_pago)}</div>
        </div>
        """, unsafe_allow_html=True)
    
    # Separador visual entre se√ß√µes
    st.markdown("---")
    
    # ==============================================================================
    # PAINEL DE GASTOS POR CATEGORIA
    # ==============================================================================
    
    # Painel de Gastos com visualiza√ß√£o por categorias
    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
    st.subheader("üí∞ Painel de Gastos por Categoria")
    
    # Controles de filtro em duas colunas
    col1, col2 = st.columns(2)
    
    # Filtro de unidade organizacional
    with col1:
        unidade_selecionada = st.selectbox(
            "Selecione uma unidade:",
            ["Todas"] + list(dados_orcamento['unidade'].unique()),
            key="unidade_orcamento"
        )
    
    # Filtro de ano para an√°lise temporal
    with col2:
        ano_selecionado = st.selectbox(
            "Selecione um ano:",
            sorted(dados_orcamento['ano'].unique(), reverse=True),
            key="ano_orcamento"
        )
    
    # ==============================================================================
    # PROCESSAMENTO E FILTRAGEM DOS DADOS
    # ==============================================================================
    
    # Aplicar filtros selecionados pelo usu√°rio
    dados_filtrados = dados_orcamento[dados_orcamento['ano'] == ano_selecionado]
    
    # Aplicar filtro de unidade se especificado
    if unidade_selecionada != "Todas":
        dados_filtrados = dados_filtrados[dados_filtrados['unidade'] == unidade_selecionada]
    
    # Agrupar dados por categoria or√ßament√°ria
    dados_categorias = dados_filtrados.groupby('categoria').agg({
        'dotacao': 'sum',      # Soma da dota√ß√£o autorizada
        'empenhado': 'sum',    # Soma dos valores empenhados
        'pago': 'sum'          # Soma dos valores pagos
    }).reset_index()
    
    # ==============================================================================
    # CONFIGURA√á√ÉO DE √çCONES POR CATEGORIA
    # ==============================================================================
    
    # √çcones visuais para cada categoria or√ßament√°ria
    icones_categorias = {
        "Pessoal e Encargos Sociais": "üë•",  # Recursos humanos
        "Custeio": "üè¢",                     # Despesas operacionais
        "Investimentos": "üíé",               # Bens de capital
        "Manuten√ß√£o": "üîß",                  # Conserva√ß√£o e reparos
        "Equipamentos": "üíª",                # Material permanente
        "Obras": "üèóÔ∏è"                       # Constru√ß√µes e reformas
    }
    
    # ==============================================================================
    # GRID DE CATEGORIAS OR√áAMENT√ÅRIAS
    # ==============================================================================
    
    # Criar layout em grid de 3 colunas para exibir categorias
    num_colunas = 3
    colunas = st.columns(num_colunas)
    
    # Iterar por cada categoria para criar cards informativos
    for idx, (_, row) in enumerate(dados_categorias.iterrows()):
        # Calcular posi√ß√£o da coluna no grid
        col_idx = idx % num_colunas
        categoria = row['categoria']
        
        # Obter √≠cone correspondente ou usar padr√£o
        icone = icones_categorias.get(categoria, "üìä")
        
        # Criar card da categoria na coluna correspondente
        with colunas[col_idx]:
            # Card HTML com √≠cone e informa√ß√µes financeiras formatadas
            st.markdown(f"""
            <div class="kpi-container">
                <div style="text-align: center; font-size: 2rem; margin-bottom: 1rem;">
                    {icone}
                </div>
                <div class="kpi-title">{categoria}</div>
                <div style="color: #1a8c73; font-size: 1.2rem; margin: 0.5rem 0;">
                    <strong>Dota√ß√£o:</strong> {data_gen.formatar_valor_monetario(row['dotacao'])}
                </div>
                <div style="color: #0d5a4e; font-size: 1.2rem; margin: 0.5rem 0;">
                    <strong>Empenhado:</strong> {data_gen.formatar_valor_monetario(row['empenhado'])}
                </div>
                <div style="color: #2db896; font-size: 1.2rem; margin: 0.5rem 0;">
                    <strong>Pago:</strong> {data_gen.formatar_valor_monetario(row['pago'])}
                </div>
            </div>
            """, unsafe_allow_html=True)
    
    # Fechar container do painel de categorias
    st.markdown('</div>', unsafe_allow_html=True)
    
    # ==============================================================================
    # GR√ÅFICO 1: COMPARA√á√ÉO OR√áAMENT√ÅRIA POR CATEGORIA
    # ==============================================================================
    
    # Gr√°fico 1: Compara√ß√£o Dota√ß√£o vs Empenhado vs Pago
    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
    st.subheader("üìä Compara√ß√£o Or√ßament√°ria por Categoria")
    
    # Reorganizar dados para formato adequado ao gr√°fico (pivot/melt)
    dados_melted = dados_categorias.melt(
        id_vars=['categoria'],                              # Coluna identificadora
        value_vars=['dotacao', 'empenhado', 'pago'],       # Colunas de valores
        var_name='tipo',                                    # Nome da nova coluna categoria
        value_name='valor'                                  # Nome da nova coluna valores
    )
    
    # Mapear nomes t√©cnicos para nomes amig√°veis
    mapeamento_tipos = {
        'dotacao': 'Dota√ß√£o',       # Or√ßamento autorizado
        'empenhado': 'Empenhado',   # Valores comprometidos
        'pago': 'Pago'              # Valores efetivamente pagos
    }
    
    # Aplicar mapeamento aos dados
    dados_melted['tipo'] = dados_melted['tipo'].map(mapeamento_tipos)
    
    # Criar gr√°fico de barras agrupadas para compara√ß√£o
    fig = px.bar(
        dados_melted,
        x='categoria',
        y='valor',
        color='tipo',                                       # Agrupar por tipo or√ßament√°rio
        title=f"Compara√ß√£o Or√ßament√°ria por Categoria - {ano_selecionado}",
        color_discrete_sequence=['#1a8c73', '#0d5a4e', '#2db896'],  # Cores institucionais
        barmode='group'                                     # Barras agrupadas lado a lado
    )
    
    # Personalizar layout do gr√°fico
    fig.update_layout(
        xaxis_title="Categoria",                           # T√≠tulo eixo X
        yaxis_title="Valor (R$)",                          # T√≠tulo eixo Y
        xaxis_tickangle=-45,                               # Inclinar labels para melhor leitura
        height=500,                                        # Altura do gr√°fico
        showlegend=True,                                   # Exibir legenda
        legend=dict(
            orientation="h",                               # Legenda horizontal
            yanchor="bottom",                              # Ancoragem inferior
            y=1.02,                                        # Posi√ß√£o acima do gr√°fico
            xanchor="right",                               # Ancoragem direita
            x=1                                            # Posi√ß√£o completa √† direita
        )
    )
    
    # Formatar valores no eixo Y com separadores
    fig.update_yaxes(tickformat='.0f')
    
    # Exibir gr√°fico de compara√ß√£o or√ßament√°ria
    st.plotly_chart(fig, use_container_width=True)
    
    # Fonte dos dados e fechamento do container
    st.markdown('<div class="fonte-dados">Fonte de Dados: Portal da Transpar√™ncia</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # ============= SE√á√ÉO: EVOLU√á√ÉO TEMPORAL DO OR√áAMENTO =============
    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
    st.subheader("üìà Evolu√ß√£o Or√ßament√°ria")
    st.write("**An√°lise da evolu√ß√£o do or√ßamento ao longo dos anos dispon√≠veis**")
    
    # Criar colunas para seletores de filtros da evolu√ß√£o temporal
    col1, col2 = st.columns(2)
    
    # Coluna 1: Seletor de tipo de an√°lise temporal
    with col1:
        # Op√ß√µes para visualiza√ß√£o temporal dos tipos or√ßament√°rios
        tipo_evolucao = st.selectbox(
            "Tipo de Or√ßamento:",                          # Label do seletor
            ["Dota√ß√£o", "Empenhado", "Pago"],             # Op√ß√µes dispon√≠veis
            key="tipo_evolucao"                            # Chave √∫nica para controle estado
        )
    
    # Coluna 2: Informa√ß√µes contextuais sobre a an√°lise temporal
    
    # Coluna 2: Seletor de unidade organizacional
    with col2:
        # Permitir filtrar por unidade espec√≠fica ou visualizar todas
        unidade_evolucao = st.selectbox(
            "Unidade:",                                    # Label do seletor
            ["Todas"] + list(dados_orcamento['unidade'].unique()),  # Op√ß√µes: todas + unidades espec√≠ficas
            key="unidade_evolucao"                         # Chave √∫nica para controle estado
        )
    
    # ============= PROCESSAMENTO: FILTRAR DADOS PARA EVOLU√á√ÉO =============
    # Criar c√≥pia dos dados para manipula√ß√£o
    dados_evolucao = dados_orcamento.copy()
    
    # Aplicar filtro de unidade se selecionada uma espec√≠fica
    if unidade_evolucao != "Todas":
        dados_evolucao = dados_evolucao[dados_evolucao['unidade'] == unidade_evolucao]
    
    # Mapear tipo selecionado para nome da coluna nos dados
    mapeamento_tipo = {
        "Dota√ß√£o": "dotacao",                              # Or√ßamento autorizado
        "Empenhado": "empenhado",                          # Valores comprometidos  
        "Pago": "pago"                                     # Valores efetivamente pagos
    }
    
    # Obter nome da coluna correspondente ao tipo selecionado
    tipo_coluna = mapeamento_tipo[tipo_evolucao]
    
    # ============= PROCESSAMENTO: AGRUPAR DADOS POR ANO =============
    # Agrupar dados por ano e somar valores do tipo selecionado
    dados_evolucao_grafico = dados_evolucao.groupby('ano')[tipo_coluna].sum().reset_index()
    
    # ============= VISUALIZA√á√ÉO: GR√ÅFICO DE EVOLU√á√ÉO TEMPORAL =============
    # Criar gr√°fico de linha para mostrar evolu√ß√£o temporal
    fig2 = px.line(
        dados_evolucao_grafico,
        x='ano',                                           # Eixo X: anos
        y=tipo_coluna,                                     # Eixo Y: valores do tipo selecionado
        title=f"Evolu√ß√£o do Or√ßamento {tipo_evolucao} - {unidade_evolucao}",  # T√≠tulo din√¢mico
        markers=True,                                      # Exibir marcadores nos pontos
        color_discrete_sequence=['#1a8c73']               # Cor institucional IFPB
    )
    
    # Personalizar layout do gr√°fico de evolu√ß√£o
    fig2.update_layout(
        xaxis_title="Ano",                                 # T√≠tulo eixo X
        yaxis_title=f"Valor {tipo_evolucao} (R$)",        # T√≠tulo eixo Y din√¢mico
        height=400,                                        # Altura do gr√°fico
        showlegend=False                                   # Ocultar legenda (apenas uma linha)
    )
    
    # Exibir gr√°fico de evolu√ß√£o temporal
    st.plotly_chart(fig2, use_container_width=True)
    
    # Fonte dos dados e fechamento do container
    st.markdown('<div class="fonte-dados">Fonte de Dados: Portal da Transpar√™ncia</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # ============= SE√á√ÉO: AN√ÅLISE DE EFICI√äNCIA OR√áAMENT√ÅRIA =============
    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
    st.subheader("üìä Efici√™ncia Or√ßament√°ria")
    st.write("**An√°lise dos percentuais de execu√ß√£o or√ßament√°ria por categoria**")
    
    # ============= PROCESSAMENTO: CALCULAR PERCENTUAIS DE EXECU√á√ÉO =============
    # Criar c√≥pia dos dados para c√°lculos de efici√™ncia
    dados_eficiencia = dados_filtrados.copy()
    
    # Calcular percentual de empenhamento (compromisso dos recursos)
    dados_eficiencia['percentual_empenhado'] = (dados_eficiencia['empenhado'] / dados_eficiencia['dotacao']) * 100
    
    # Calcular percentual de pagamento (execu√ß√£o efetiva)
    dados_eficiencia['percentual_pago'] = (dados_eficiencia['pago'] / dados_eficiencia['dotacao']) * 100
    
    # ============= PROCESSAMENTO: AGRUPAR DADOS POR CATEGORIA =============
    # Agrupar por categoria e calcular m√©dias dos percentuais
    dados_eficiencia_grafico = dados_eficiencia.groupby('categoria').agg({
        'percentual_empenhado': 'mean',                    # M√©dia do percentual empenhado por categoria
        'percentual_pago': 'mean'                          # M√©dia do percentual pago por categoria
    }).reset_index()
    
    # ============= PROCESSAMENTO: REORGANIZAR DADOS PARA VISUALIZA√á√ÉO =============
    # Transformar dados para formato adequado ao gr√°fico (pivot/melt)
    dados_eficiencia_melted = dados_eficiencia_grafico.melt(
        id_vars=['categoria'],                             # Coluna identificadora
        value_vars=['percentual_empenhado', 'percentual_pago'],  # Colunas de percentuais
        var_name='tipo',                                   # Nome da nova coluna categoria
        value_name='percentual'                            # Nome da nova coluna valores
    )
    
    # Mapear nomes t√©cnicos para nomes amig√°veis na visualiza√ß√£o
    mapeamento_eficiencia = {
        'percentual_empenhado': 'Percentual Empenhado',   # Recursos comprometidos
        'percentual_pago': 'Percentual Pago'              # Recursos efetivamente pagos
    }
    
    # Aplicar mapeamento aos dados
    dados_eficiencia_melted['tipo'] = dados_eficiencia_melted['tipo'].map(mapeamento_eficiencia)
    
    # ============= VISUALIZA√á√ÉO: GR√ÅFICO DE EFICI√äNCIA OR√áAMENT√ÅRIA =============
    # Criar gr√°fico de barras para mostrar efici√™ncia por categoria
    fig3 = px.bar(
        dados_eficiencia_melted,
        x='categoria',                                     # Eixo X: categorias or√ßament√°rias
        y='percentual',                                    # Eixo Y: percentuais de execu√ß√£o
        color='tipo',                                      # Agrupar por tipo de efici√™ncia
        title=f"Efici√™ncia Or√ßament√°ria por Categoria - {ano_selecionado}",  # T√≠tulo din√¢mico
        color_discrete_sequence=['#1a8c73', '#0d5a4e'],   # Cores institucionais IFPB
        barmode='group'                                    # Barras agrupadas lado a lado
    )
    
    # Personalizar layout do gr√°fico de efici√™ncia
    fig3.update_layout(
        xaxis_title="Categoria",                           # T√≠tulo eixo X
        yaxis_title="Percentual (%)",                     # T√≠tulo eixo Y
        xaxis_tickangle=-45,                               # Inclinar labels para melhor leitura
        height=400,                                        # Altura do gr√°fico
        showlegend=True                                    # Exibir legenda
    )
    
    # Adicionar linha de refer√™ncia em 100% (execu√ß√£o completa)
    fig3.add_hline(
        y=100,                                             # Valor da linha horizontal
        line_dash="dash",                                  # Linha tracejada
        line_color="red",                                  # Cor vermelha para destaque
        annotation_text="100% - Execu√ß√£o Completa"        # Texto explicativo
    )
    
    # Exibir gr√°fico de efici√™ncia or√ßament√°ria
    st.plotly_chart(fig3, use_container_width=True)
    
    # Fonte dos dados e fechamento do container
    st.markdown('<div class="fonte-dados">Fonte de Dados: Portal da Transpar√™ncia</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # ============= RODAP√â: INFORMA√á√ïES GERAIS =============
    # Exibir rodap√© padr√£o do sistema
    display_footer()

#!/usr/bin/env python3
"""
=============================================================================
M√ìDULO EXEMPLO - TEMPLATE PARA NOVOS M√ìDULOS - SISTEMA DASHBOARD IFPB-CZ
=============================================================================

Este arquivo serve como template e guia de refer√™ncia para cria√ß√£o de novos
m√≥dulos no Sistema Dashboard IFPB-CZ, demonstrando estrutura padr√£o,
conven√ß√µes de nomenclatura, organiza√ß√£o de c√≥digo e implementa√ß√£o de
funcionalidades essenciais seguindo os padr√µes estabelecidos no sistema.

ESTRUTURA PADR√ÉO DE UM M√ìDULO:
------------------------------
1. Cabe√ßalho com documenta√ß√£o completa
2. Importa√ß√£o de bibliotecas necess√°rias
3. Configura√ß√£o de constantes e cores institucionais
4. Fun√ß√£o de carregamento de dados
5. Fun√ß√µes auxiliares espec√≠ficas do m√≥dulo
6. Fun√ß√µes de cria√ß√£o de visualiza√ß√µes
7. Fun√ß√£o principal do dashboard
8. Ponto de entrada para execu√ß√£o independente

CONVEN√á√ïES OBRIGAT√ìRIAS:
------------------------
- Nome do arquivo: nome_do_modulo.py (snake_case)
- Fun√ß√£o principal: mostrar_dashboard_[nome_modulo]()
- Cores institucionais: usar CORES_IFPB do utils.py
- Estrutura de dados: sempre usar DataFrames do pandas
- Tratamento de erros: implementar try/except apropriados
- Documenta√ß√£o: docstrings detalhadas para todas as fun√ß√µes

FUNCIONALIDADES ESSENCIAIS:
---------------------------
- Carregamento de dados (reais ou sint√©ticos)
- Filtros interativos na sidebar
- M√∫ltiplas visualiza√ß√µes (KPIs, gr√°ficos, tabelas)
- Responsividade e layout adaptativo
- Tratamento de casos sem dados
- Informa√ß√µes de atualiza√ß√£o e fonte

DEPEND√äNCIAS PADR√ÉO:
--------------------
- streamlit: interface web
- pandas: manipula√ß√£o de dados
- plotly: visualiza√ß√µes interativas
- datetime: manipula√ß√£o de datas
- modules.utils: utilit√°rios compartilhados

AUTOR: Sistema Dashboard IFPB-CZ - NAI
DATA: 2024
=============================================================================
"""

# =============================================================================
# IMPORTA√á√ïES NECESS√ÅRIAS
# =============================================================================

# Biblioteca principal para interface web interativa
import streamlit as st

# Bibliotecas para manipula√ß√£o e an√°lise de dados
import pandas as pd                    # Manipula√ß√£o de DataFrames
import numpy as np                     # Opera√ß√µes num√©ricas e arrays

# Bibliotecas para visualiza√ß√µes interativas
import plotly.express as px            # Gr√°ficos r√°pidos e intuitivos
import plotly.graph_objects as go      # Gr√°ficos customizados avan√ßados

# Bibliotecas para manipula√ß√£o de datas e tempo
from datetime import datetime, date    # Opera√ß√µes com datas

# Importar utilit√°rios compartilhados do sistema IFPB-CZ
from modules.utils import (
    CORES_IFPB,                       # Paleta de cores institucional IFPB
    aplicar_estilo_personalizado,     # CSS customizado para interface
    criar_card_metrica,               # Componente para exibir KPIs
    formatar_numero,                  # Formata√ß√£o de n√∫meros brasileira
    gerar_dados_ficticios,           # Gerador de dados para testes
    exibir_info_atualizacao          # Rodap√© com informa√ß√µes de atualiza√ß√£o
)

# =============================================================================
# CONFIGURA√á√ïES ESPEC√çFICAS DO M√ìDULO
# =============================================================================

# Nome do m√≥dulo para identifica√ß√£o interna e logs
NOME_MODULO = "Exemplo"

# Descri√ß√£o exibida no cabe√ßalho do dashboard
DESCRICAO_MODULO = "M√≥dulo de exemplo demonstrando estrutura padr√£o para novos desenvolvimentos"

# Identifica√ß√£o da origem dos dados para rastreabilidade
FONTE_DADOS = "Sistema de Gest√£o Exemplo / Dados Sint√©ticos"

# Dicion√°rio com configura√ß√µes centralizadas do m√≥dulo
# Facilita manuten√ß√£o e customiza√ß√£o de par√¢metros
CONFIGURACOES = {
    'periodo_padrao': datetime.now().year,  # Ano atual como padr√£o
    # Lista de categorias poss√≠veis para classifica√ß√£o
    'categorias_exemplo': ['Categoria A', 'Categoria B', 'Categoria C', 'Categoria D'],
    # Estados poss√≠veis para controle de workflow
    'status_possiveis': ['Ativo', 'Inativo', 'Pendente', 'Conclu√≠do'],
    # Tipos de indicadores para an√°lise multidimensional
    'tipos_indicadores': ['Indicador 1', 'Indicador 2', 'Indicador 3']
}

# =============================================================================
# FUN√á√ÉO DE CARREGAMENTO DE DADOS
# =============================================================================

def carregar_dados_exemplo():
    """
    Carrega dados do m√≥dulo exemplo (reais ou sint√©ticos).
    
    Esta fun√ß√£o implementa o carregamento de dados espec√≠ficos do m√≥dulo,
    seguindo o padr√£o estabelecido no sistema para integra√ß√£o com fontes
    de dados reais ou gera√ß√£o de dados sint√©ticos para demonstra√ß√£o.
    
    ESTRAT√âGIA DE CARREGAMENTO:
    1. Tentar carregar dados reais de arquivo/API
    2. Em caso de falha, gerar dados sint√©ticos
    3. Aplicar valida√ß√µes e tratamentos necess√°rios
    4. Retornar DataFrame padronizado
    
    ESTRUTURA DE DADOS ESPERADA:
    - data: data do registro (formato datetime)
    - categoria: categoria do item
    - valor: valor num√©rico principal
    - quantidade: quantidade relacionada
    - status: status atual do item
    - tipo: tipo/classifica√ß√£o do item
    - descricao: descri√ß√£o textual
    
    RETORNO:
    --------
    pd.DataFrame
        DataFrame com dados do m√≥dulo, estruturado conforme especifica√ß√£o
        
    TRATAMENTO DE ERROS:
    --------------------
    - Captura exce√ß√µes de carregamento
    - Fallback para dados sint√©ticos
    - Logging de erros quando necess√°rio
    """
    try:
        # =============================================================================
        # TENTATIVA DE CARREGAMENTO DE DADOS REAIS
        # =============================================================================
        
        # SUBSTITUIR ESTA SE√á√ÉO PELA L√ìGICA REAL DE CARREGAMENTO
        # Exemplos poss√≠veis:
        # - pd.read_excel('dados/dados_modulo_exemplo.xlsx')
        # - Consulta a API: requests.get('api_endpoint')
        # - Consulta a banco de dados: pd.read_sql(query, connection)
        
        # Para demonstra√ß√£o, simular falha para usar dados sint√©ticos
        raise FileNotFoundError("Arquivo de dados reais n√£o encontrado")
        
    except Exception as e:
        # =============================================================================
        # GERA√á√ÉO DE DADOS SINT√âTICOS PARA DEMONSTRA√á√ÉO
        # =============================================================================
        
        # Informar ao usu√°rio sobre o uso de dados sint√©ticos
        st.info(f"üìä Usando dados sint√©ticos para demonstra√ß√£o do m√≥dulo {NOME_MODULO}")
        
        # Lista para armazenar registros gerados
        dados_sinteticos = []
        
        # Definir per√≠odo de dados (√∫ltimos 24 meses para ter volume representativo)
        periodo_inicio = datetime.now().replace(day=1, month=1) - pd.DateOffset(years=1)
        # Gerar 500 datas distribu√≠das no per√≠odo (aproximadamente 1.5 registros por dia)
        datas = pd.date_range(start=periodo_inicio, periods=500, freq='D')
        
        # Gerar registros sint√©ticos combinando datas com categorias
        for data in datas:
            for categoria in CONFIGURACOES['categorias_exemplo']:
                # Gerar valores usando distribui√ß√£o normal para realismo
                # Valor base centrado em R$ 1.000 com desvio de R$ 200
                valor_base = np.random.normal(1000, 200)
                
                # Quantidade segue distribui√ß√£o de Poisson (t√≠pica para contagens)
                # Lambda = 10 gera m√©dia de 10 itens por registro
                quantidade = np.random.poisson(10)
                
                # Criar registro individual com estrutura padronizada
                registro = {
                    'data': data,                                                    # Data do registro
                    'categoria': categoria,                                          # Categoria de classifica√ß√£o
                    'valor': max(0, valor_base + np.random.normal(0, 100)),        # Valor monet√°rio (sempre positivo)
                    'quantidade': max(0, quantidade),                               # Quantidade (sempre positiva)
                    'status': np.random.choice(CONFIGURACOES['status_possiveis']), # Status aleat√≥rio
                    'tipo': np.random.choice(CONFIGURACOES['tipos_indicadores']),  # Tipo de indicador
                    'descricao': f"Registro exemplo para {categoria} em {data.strftime('%d/%m/%Y')}"  # Descri√ß√£o descritiva
                }
                # Adicionar registro √† lista de dados sint√©ticos
                dados_sinteticos.append(registro)
        
        # Converter lista de dicion√°rios para DataFrame pandas
        df = pd.DataFrame(dados_sinteticos)
        
        # Aplicar tratamentos e valida√ß√µes dos dados
        df['data'] = pd.to_datetime(df['data'])    # Garantir formato datetime
        df['ano'] = df['data'].dt.year             # Extrair ano para filtros
        df['mes'] = df['data'].dt.month            # Extrair m√™s para agrega√ß√µes
        df['valor'] = df['valor'].round(2)         # Arredondar valores para 2 decimais
        
        return df

# =============================================================================
# FUN√á√ïES AUXILIARES ESPEC√çFICAS DO M√ìDULO
# =============================================================================

def calcular_indicadores_exemplo(df):
    """
    Calcula indicadores espec√≠ficos do m√≥dulo exemplo.
    
    PAR√ÇMETROS:
    -----------
    df : pd.DataFrame
        DataFrame com dados do m√≥dulo
        
    RETORNO:
    --------
    dict
        Dicion√°rio com indicadores calculados
    """
    # Verificar se DataFrame est√° vazio para evitar erros de c√°lculo
    if df.empty:
        # Retornar indicadores zerados quando n√£o h√° dados
        return {
            'total_registros': 0,
            'valor_total': 0,
            'media_valor': 0,
            'quantidade_total': 0,
            'crescimento_mensal': 0
        }
    
    # =============================================================================
    # C√ÅLCULO DE INDICADORES B√ÅSICOS
    # =============================================================================
    
    # Contar total de registros no DataFrame filtrado
    total_registros = len(df)
    
    # Somar todos os valores monet√°rios
    valor_total = df['valor'].sum()
    
    # Calcular valor m√©dio por registro
    media_valor = df['valor'].mean()
    
    # Somar todas as quantidades
    quantidade_total = df['quantidade'].sum()
    
    # =============================================================================
    # C√ÅLCULO DE CRESCIMENTO MENSAL
    # =============================================================================
    
    # Filtrar dados do m√™s atual (√∫ltimo m√™s com dados)
    df_atual = df[df['data'] >= df['data'].max() - pd.DateOffset(months=1)]
    
    # Filtrar dados do m√™s anterior (pen√∫ltimo m√™s)
    df_anterior = df[(df['data'] >= df['data'].max() - pd.DateOffset(months=2)) & 
                     (df['data'] < df['data'].max() - pd.DateOffset(months=1))]
    
    # Calcular valores totais de cada per√≠odo
    valor_atual = df_atual['valor'].sum() if not df_atual.empty else 0
    valor_anterior = df_anterior['valor'].sum() if not df_anterior.empty else 1  # Evitar divis√£o por zero
    
    # Calcular percentual de crescimento mensal
    crescimento_mensal = ((valor_atual - valor_anterior) / valor_anterior * 100) if valor_anterior > 0 else 0
    
    # =============================================================================
    # RETORNO DOS INDICADORES CALCULADOS
    # =============================================================================
    
    # Retornar dicion√°rio com todos os indicadores calculados
    return {
        'total_registros': total_registros,      # Quantidade total de registros
        'valor_total': valor_total,              # Soma de todos os valores
        'media_valor': media_valor,              # Valor m√©dio por registro
        'quantidade_total': quantidade_total,    # Soma de todas as quantidades
        'crescimento_mensal': crescimento_mensal # Percentual de crescimento mensal
    }

def filtrar_dados_exemplo(df, filtros):
    """
    Aplica filtros aos dados do m√≥dulo exemplo.
    
    Esta fun√ß√£o implementa a l√≥gica de filtragem dos dados baseada
    nas sele√ß√µes do usu√°rio na interface, permitindo an√°lises
    espec√≠ficas por per√≠odo, categoria e status.
    
    PAR√ÇMETROS:
    -----------
    df : pd.DataFrame
        DataFrame original com todos os dados carregados
    filtros : dict
        Dicion√°rio com filtros selecionados pelo usu√°rio contendo:
        - 'periodo': ano selecionado para an√°lise
        - 'categorias': lista de categorias selecionadas
        - 'status': lista de status selecionados
        
    RETORNO:
    --------
    pd.DataFrame
        DataFrame filtrado conforme sele√ß√µes do usu√°rio
        
    L√ìGICA DE FILTRAGEM:
    -------------------
    1. Criar c√≥pia do DataFrame original para preservar dados
    2. Aplicar filtro de per√≠odo (ano) se especificado
    3. Aplicar filtro de categorias se especificado
    4. Aplicar filtro de status se especificado
    5. Retornar DataFrame resultante
    """
    # Criar c√≥pia do DataFrame original para n√£o modificar os dados fonte
    df_filtrado = df.copy()
    
    # =============================================================================
    # APLICA√á√ÉO DE FILTROS SEQUENCIAIS
    # =============================================================================
    
    # Filtro por per√≠odo (ano)
    # Aplicar apenas se per√≠odo foi especificado
    if filtros.get('periodo'):
        df_filtrado = df_filtrado[df_filtrado['ano'] == filtros['periodo']]
    
    # Filtro por categorias
    # Aplicar apenas se categorias foram especificadas
    if filtros.get('categorias'):
        df_filtrado = df_filtrado[df_filtrado['categoria'].isin(filtros['categorias'])]
    
    # Filtro por status
    # Aplicar apenas se status foram especificados
    if filtros.get('status'):
        df_filtrado = df_filtrado[df_filtrado['status'].isin(filtros['status'])]
    
    return df_filtrado

# =============================================================================
# FUN√á√ïES DE CRIA√á√ÉO DE VISUALIZA√á√ïES
# =============================================================================

def criar_grafico_evolucao_temporal(df):
    """
    Cria gr√°fico de evolu√ß√£o temporal dos dados.
    
    Esta fun√ß√£o gera um gr√°fico de linha mostrando a evolu√ß√£o
    dos valores ao longo do tempo, agregando dados mensalmente
    para facilitar visualiza√ß√£o de tend√™ncias.
    
    PAR√ÇMETROS:
    -----------
    df : pd.DataFrame
        DataFrame com dados filtrados contendo colunas:
        - 'data': datas dos registros
        - 'valor': valores monet√°rios
        - 'quantidade': quantidades associadas
        
    RETORNO:
    --------
    plotly.graph_objects.Figure
        Gr√°fico de linha interativo com evolu√ß√£o temporal
        
    CARACTER√çSTICAS DO GR√ÅFICO:
    ---------------------------
    - Agrega√ß√£o mensal dos dados
    - Linha com marcadores para melhor visualiza√ß√£o
    - Cores institucionais IFPB
    - Hover interativo
    - Tratamento para casos sem dados
    """
    # =============================================================================
    # VALIDA√á√ÉO DE DADOS DISPON√çVEIS
    # =============================================================================
    
    # Verificar se h√° dados para processar
    if df.empty:
        # Criar gr√°fico vazio com mensagem informativa
        fig = go.Figure()
        fig.add_annotation(
            text="Nenhum dado dispon√≠vel para o per√≠odo selecionado",
            xref="paper", yref="paper",              # Refer√™ncias relativas ao papel
            x=0.5, y=0.5,                            # Posi√ß√£o central
            xanchor='center', yanchor='middle',      # √Çncoras centralizadas
            showarrow=False, font_size=16            # Sem seta, fonte leg√≠vel
        )
        return fig
    
    # =============================================================================
    # AGREGA√á√ÉO DE DADOS POR PER√çODO MENSAL
    # =============================================================================
    
    # Agrupar dados por m√™s para suavizar visualiza√ß√£o
    # to_period('M') agrupa por m√™s, ignorando o dia
    df_mensal = df.groupby(df['data'].dt.to_period('M')).agg({
        'valor': 'sum',        # Somar valores do m√™s
        'quantidade': 'sum'    # Somar quantidades do m√™s
    }).reset_index()
    
    # Converter per√≠odo de volta para timestamp para usar no gr√°fico
    df_mensal['data'] = df_mensal['data'].dt.to_timestamp()
    
    # =============================================================================
    # CRIA√á√ÉO DO GR√ÅFICO DE LINHA
    # =============================================================================
    
    # Inicializar figura Plotly
    fig = go.Figure()
    
    # Adicionar linha principal com valores mensais
    fig.add_trace(go.Scatter(
        x=df_mensal['data'],                          # Eixo X: datas mensais
        y=df_mensal['valor'],                         # Eixo Y: valores agregados
        mode='lines+markers',                         # Linha cont√≠nua + marcadores
        name='Valor Total',                           # Nome da s√©rie
        line=dict(color=CORES_IFPB['primary'], width=3),  # Estilo da linha
        marker=dict(size=8)                           # Tamanho dos marcadores
    ))
    
    # =============================================================================
    # CONFIGURA√á√ÉO DE LAYOUT E ESTILO
    # =============================================================================
    
    # Configurar apar√™ncia e interatividade do gr√°fico
    fig.update_layout(
        title="Evolu√ß√£o Temporal dos Valores",       # T√≠tulo descritivo
        xaxis_title="Per√≠odo",                       # R√≥tulo do eixo X
        yaxis_title="Valor Total",                   # R√≥tulo do eixo Y
        hovermode='x unified',                       # Hover unificado no eixo X
        plot_bgcolor='white',                        # Fundo do gr√°fico branco
        paper_bgcolor='white',                       # Fundo do papel branco
        font=dict(size=12)                           # Tamanho da fonte
    )
    
    return fig

def criar_grafico_distribuicao_categoria(df):
    """
    Cria gr√°fico de distribui√ß√£o por categoria.
    
    Esta fun√ß√£o gera um gr√°fico de barras horizontais mostrando
    a distribui√ß√£o de valores entre diferentes categorias,
    facilitando compara√ß√£o visual entre categorias.
    
    PAR√ÇMETROS:
    -----------
    df : pd.DataFrame
        DataFrame com dados filtrados contendo colunas:
        - 'categoria': categorias para agrupamento
        - 'valor': valores para agrega√ß√£o
        - 'quantidade': quantidades para agrega√ß√£o
        
    RETORNO:
    --------
    plotly.graph_objects.Figure
        Gr√°fico de barras horizontais interativo
        
    CARACTER√çSTICAS DO GR√ÅFICO:
    ---------------------------
    - Barras horizontais para melhor legibilidade de categorias
    - Ordena√ß√£o crescente por valor
    - Cores institucionais IFPB
    - R√≥tulos de valores formatados
    - Tratamento para casos sem dados
    """
    # =============================================================================
    # VALIDA√á√ÉO DE DADOS DISPON√çVEIS
    # =============================================================================
    
    # Verificar se h√° dados para processar
    if df.empty:
        # Criar gr√°fico vazio com mensagem informativa
        fig = go.Figure()
        fig.add_annotation(
            text="Nenhum dado dispon√≠vel",
            xref="paper", yref="paper",              # Refer√™ncias relativas
            x=0.5, y=0.5,                            # Posi√ß√£o central
            xanchor='center', yanchor='middle',      # √Çncoras centralizadas
            showarrow=False, font_size=16            # Sem seta, fonte leg√≠vel
        )
        return fig
    
    # =============================================================================
    # AGREGA√á√ÉO E ORDENA√á√ÉO DOS DADOS
    # =============================================================================
    
    # Agrupar dados por categoria e calcular totais
    df_categoria = df.groupby('categoria').agg({
        'valor': 'sum',        # Somar valores por categoria
        'quantidade': 'sum'    # Somar quantidades por categoria
    }).reset_index()
    
    # Ordenar por valor crescente para facilitar leitura do gr√°fico
    df_categoria = df_categoria.sort_values('valor', ascending=True)
    
    # =============================================================================
    # CRIA√á√ÉO DO GR√ÅFICO DE BARRAS HORIZONTAIS
    # =============================================================================
    
    # Inicializar figura Plotly
    fig = go.Figure()
    
    # Adicionar barras horizontais
    fig.add_trace(go.Bar(
        x=df_categoria['valor'],                     # Eixo X: valores agregados
        y=df_categoria['categoria'],                 # Eixo Y: categorias
        orientation='h',                             # Orienta√ß√£o horizontal
        marker_color=CORES_IFPB['secondary'],       # Cor institucional secund√°ria
        # Formatar n√∫meros nos r√≥tulos das barras
        text=df_categoria['valor'].apply(lambda x: formatar_numero(x)),
        textposition='auto'                          # Posi√ß√£o autom√°tica do texto
    ))
    
    # =============================================================================
    # CONFIGURA√á√ÉO DE LAYOUT E ESTILO
    # =============================================================================
    
    # Configurar apar√™ncia do gr√°fico de barras
    fig.update_layout(
        title="Distribui√ß√£o de Valores por Categoria",  # T√≠tulo descritivo
        xaxis_title="Valor Total",                      # R√≥tulo eixo X
        yaxis_title="Categoria",                        # R√≥tulo eixo Y
        plot_bgcolor='white',                           # Fundo branco
        paper_bgcolor='white',                          # Papel branco
        font=dict(size=12)                              # Fonte leg√≠vel
    )
    
    return fig

def criar_grafico_status_pizza(df):
    """
    Cria gr√°fico de pizza com distribui√ß√£o por status.
    
    Esta fun√ß√£o gera um gr√°fico de pizza (donut) mostrando
    a distribui√ß√£o proporcional dos diferentes status,
    ideal para visualizar composi√ß√£o de categorias.
    
    PAR√ÇMETROS:
    -----------
    df : pd.DataFrame
        DataFrame com dados filtrados contendo coluna:
        - 'status': status dos registros para contagem
        
    RETORNO:
    --------
    plotly.graph_objects.Figure
        Gr√°fico de pizza interativo com distribui√ß√£o de status
        
    CARACTER√çSTICAS DO GR√ÅFICO:
    ---------------------------
    - Formato donut (com buraco central)
    - Cores institucionais IFPB
    - Percentuais autom√°ticos
    - Interatividade com hover
    - Tratamento para casos sem dados
    """
    # =============================================================================
    # VALIDA√á√ÉO DE DADOS DISPON√çVEIS
    # =============================================================================
    
    # Verificar se h√° dados para processar
    if df.empty:
        # Criar gr√°fico vazio com mensagem informativa
        fig = go.Figure()
        fig.add_annotation(
            text="Nenhum dado dispon√≠vel",
            xref="paper", yref="paper",              # Refer√™ncias relativas
            x=0.5, y=0.5,                            # Posi√ß√£o central
            xanchor='center', yanchor='middle',      # √Çncoras centralizadas
            showarrow=False, font_size=16            # Sem seta, fonte leg√≠vel
        )
        return fig
    
    # =============================================================================
    # CONTAGEM E PREPARA√á√ÉO DOS DADOS
    # =============================================================================
    
    # Contar ocorr√™ncias de cada status
    df_status = df['status'].value_counts().reset_index()
    df_status.columns = ['status', 'count']      # Renomear colunas para clareza
    
    # =============================================================================
    # CRIA√á√ÉO DO GR√ÅFICO DE PIZZA
    # =============================================================================
    
    # Inicializar figura Plotly
    fig = go.Figure()
    
    # Adicionar gr√°fico de pizza com estilo donut
    fig.add_trace(go.Pie(
        labels=df_status['status'],              # R√≥tulos das fatias
        values=df_status['count'],               # Valores para propor√ß√£o
        hole=0.4,                                # Buraco central (estilo donut)
        # Array de cores institucionais IFPB para as fatias
        marker_colors=[CORES_IFPB['primary'], CORES_IFPB['secondary'], 
                      CORES_IFPB['accent'], CORES_IFPB['highlight']]
    ))
    
    # =============================================================================
    # CONFIGURA√á√ÉO DE LAYOUT E ESTILO
    # =============================================================================
    
    # Configurar apar√™ncia do gr√°fico de pizza
    fig.update_layout(
        title="Distribui√ß√£o por Status",            # T√≠tulo descritivo
        plot_bgcolor='white',                       # Fundo branco
        paper_bgcolor='white',                      # Papel branco
        font=dict(size=12)                          # Fonte leg√≠vel
    )
    
    return fig

# =============================================================================
# FUN√á√ÉO PRINCIPAL DO DASHBOARD
# =============================================================================

def mostrar_dashboard_exemplo():
    """
    Fun√ß√£o principal do dashboard do m√≥dulo exemplo.
    
    Esta fun√ß√£o implementa toda a interface e funcionalidade do dashboard,
    seguindo o padr√£o estabelecido no sistema para garantir consist√™ncia
    visual e funcional entre todos os m√≥dulos.
    
    ESTRUTURA IMPLEMENTADA:
    1. Aplica√ß√£o de estilos personalizados
    2. Cria√ß√£o de t√≠tulo e descri√ß√£o
    3. Carregamento de dados
    4. Cria√ß√£o de filtros na sidebar
    5. Aplica√ß√£o de filtros aos dados
    6. C√°lculo de indicadores
    7. Exibi√ß√£o de KPIs principais
    8. Cria√ß√£o de visualiza√ß√µes
    9. Informa√ß√µes de atualiza√ß√£o
    
    LAYOUT RESPONSIVO:
    - Uso de colunas para organiza√ß√£o
    - Adapta√ß√£o autom√°tica a diferentes tamanhos de tela
    - Elementos visuais consistentes com identidade IFPB
    
    INTERATIVIDADE:
    - Filtros din√¢micos na sidebar
    - Gr√°ficos interativos com Plotly
    - Atualiza√ß√£o autom√°tica baseada em filtros
    """
    # =============================================================================
    # CONFIGURA√á√ÉO INICIAL E ESTILOS
    # =============================================================================
    
    # Aplicar CSS customizado e tema institucional IFPB
    aplicar_estilo_personalizado()
    
    # Criar cabe√ßalho principal com √≠cone e t√≠tulo do m√≥dulo
    st.title(f"üìä Dashboard {NOME_MODULO}")
    # Exibir descri√ß√£o detalhada do m√≥dulo
    st.markdown(f"**{DESCRICAO_MODULO}**")
    # Separador visual para organizar conte√∫do
    st.markdown("---")
    
    # =============================================================================
    # CARREGAMENTO DE DADOS
    # =============================================================================
    
    # Carregar dados com indicador visual de progresso
    # Spinner melhora experi√™ncia do usu√°rio durante carregamento
    with st.spinner("Carregando dados..."):
        df = carregar_dados_exemplo()
    
    # Valida√ß√£o cr√≠tica: verificar se dados foram carregados com sucesso
    if df.empty:
        # Exibir mensagens de erro informativas ao usu√°rio
        st.error("‚ùå Nenhum dado dispon√≠vel para exibi√ß√£o.")
        st.info("Verifique a conex√£o com a fonte de dados ou entre em contato com o suporte.")
        return  # Interromper execu√ß√£o se n√£o h√° dados
    
    # =============================================================================
    # FILTROS INTERATIVOS NA SIDEBAR
    # =============================================================================
    
    # Criar se√ß√£o de filtros na barra lateral para interatividade
    st.sidebar.header("üîç Filtros")
    
    # -------------------------------------------------------------------------
    # FILTRO DE PER√çODO (ANO)
    # -------------------------------------------------------------------------
    
    # Extrair anos √∫nicos dispon√≠veis nos dados e ordenar
    anos_disponiveis = sorted(df['ano'].unique())
    # Selectbox para escolha √∫nica do per√≠odo de an√°lise
    ano_selecionado = st.sidebar.selectbox(
        "üìÖ Per√≠odo",                                      # R√≥tulo com √≠cone
        options=anos_disponiveis,                         # Op√ß√µes dispon√≠veis
        index=len(anos_disponiveis)-1 if anos_disponiveis else 0,  # √öltimo ano como padr√£o
        help="Selecione o ano para an√°lise"               # Tooltip de ajuda
    )
    
    # -------------------------------------------------------------------------
    # FILTRO DE CATEGORIAS
    # -------------------------------------------------------------------------
    
    # Extrair categorias √∫nicas e ordenar alfabeticamente
    categorias_disponiveis = sorted(df['categoria'].unique())
    # Multiselect permite sele√ß√£o m√∫ltipla de categorias
    categorias_selecionadas = st.sidebar.multiselect(
        "üìÇ Categorias",                                  # R√≥tulo com √≠cone
        options=categorias_disponiveis,                   # Todas as categorias
        default=categorias_disponiveis,                   # Todas selecionadas por padr√£o
        help="Selecione uma ou mais categorias"          # Tooltip explicativo
    )
    
    # -------------------------------------------------------------------------
    # FILTRO DE STATUS
    # -------------------------------------------------------------------------
    
    # Extrair status √∫nicos e ordenar alfabeticamente
    status_disponiveis = sorted(df['status'].unique())
    # Multiselect para sele√ß√£o m√∫ltipla de status
    # Multiselect para sele√ß√£o m√∫ltipla de status
    status_selecionados = st.sidebar.multiselect(
        "üìã Status",                                      # R√≥tulo com √≠cone
        options=status_disponiveis,                       # Todos os status
        default=status_disponiveis,                       # Todos selecionados por padr√£o
        help="Selecione um ou mais status"                # Tooltip explicativo
    )
    
    # =============================================================================
    # APLICA√á√ÉO DE FILTROS AOS DADOS
    # =============================================================================
    
    # Organizar filtros selecionados em dicion√°rio estruturado
    filtros = {
        'periodo': ano_selecionado,                       # Ano selecionado
        'categorias': categorias_selecionadas,            # Lista de categorias
        'status': status_selecionados                     # Lista de status
    }
    
    # Aplicar filtros aos dados usando fun√ß√£o espec√≠fica
    df_filtrado = filtrar_dados_exemplo(df, filtros)
    
    # Valida√ß√£o cr√≠tica: verificar se ainda h√° dados ap√≥s filtragem
    if df_filtrado.empty:
        # Avisar usu√°rio sobre filtros muito restritivos
        st.warning("‚ö†Ô∏è Nenhum dado encontrado para os filtros selecionados.")
        st.info("Tente ajustar os filtros na barra lateral.")
        return  # Interromper execu√ß√£o se n√£o h√° dados filtrados
    
    # =============================================================================
    # C√ÅLCULO DE INDICADORES PRINCIPAIS
    # =============================================================================
    
    # Processar dados filtrados para extrair KPIs essenciais
    indicadores = calcular_indicadores_exemplo(df_filtrado)
    
    # =============================================================================
    # EXIBI√á√ÉO DE KPIs PRINCIPAIS
    # =============================================================================
    
    # Criar se√ß√£o de indicadores principais com t√≠tulo
    st.subheader("üìà Indicadores Principais")
    
    # Layout responsivo: 4 colunas para m√©tricas principais
    col1, col2, col3, col4 = st.columns(4)
    
    # -------------------------------------------------------------------------
    # KPI 1: TOTAL DE REGISTROS
    # -------------------------------------------------------------------------
    with col1:
        criar_card_metrica(
            "Total de Registros",                         # T√≠tulo da m√©trica
            formatar_numero(indicadores['total_registros']),  # Valor formatado
            "üìä"                                          # √çcone representativo
        )
    
    # -------------------------------------------------------------------------
    # KPI 2: VALOR TOTAL MONET√ÅRIO
    # -------------------------------------------------------------------------
    with col2:
        criar_card_metrica(
            "Valor Total",                                # T√≠tulo da m√©trica
            f"R$ {formatar_numero(indicadores['valor_total'])}",  # Valor em reais
            "üí∞"                                          # √çcone de dinheiro
        )
    
    # -------------------------------------------------------------------------
    # KPI 3: VALOR M√âDIO POR REGISTRO
    # -------------------------------------------------------------------------
    with col3:
        criar_card_metrica(
            "M√©dia por Registro",                         # T√≠tulo da m√©trica
            f"R$ {formatar_numero(indicadores['media_valor'])}",  # M√©dia formatada
            "üìä"                                          # √çcone de estat√≠stica
        )
    
    # -------------------------------------------------------------------------
    # KPI 4: CRESCIMENTO MENSAL (COM INDICADOR VISUAL)
    # -------------------------------------------------------------------------
    with col4:
        # Determinar √≠cone baseado em crescimento positivo/negativo
        icone_crescimento = "üìà" if indicadores['crescimento_mensal'] >= 0 else "üìâ"
        criar_card_metrica(
            "Crescimento Mensal",                         # T√≠tulo da m√©trica
            f"{indicadores['crescimento_mensal']:.1f}%",  # Percentual com 1 decimal
            icone_crescimento                             # √çcone din√¢mico
        )
    
    # Separador visual entre se√ß√µes
    st.markdown("---")
    
    # =============================================================================
    # VISUALIZA√á√ïES PRINCIPAIS
    # =============================================================================
    
    # -------------------------------------------------------------------------
    # PRIMEIRA LINHA: GR√ÅFICOS TEMPORAIS E CATEG√ìRICOS
    # -------------------------------------------------------------------------
    
    # Layout responsivo: 2 colunas para gr√°ficos lado a lado
    col1, col2 = st.columns(2)
    
    # Gr√°fico de evolu√ß√£o temporal na primeira coluna
    with col1:
        st.subheader("üìà Evolu√ß√£o Temporal")
        # Criar e exibir gr√°fico de linha com evolu√ß√£o mensal
        fig_evolucao = criar_grafico_evolucao_temporal(df_filtrado)
        # use_container_width=True torna gr√°fico responsivo
        st.plotly_chart(fig_evolucao, use_container_width=True)
    
    # Gr√°fico de distribui√ß√£o por categoria na segunda coluna
    with col2:
        st.subheader("üìä Distribui√ß√£o por Categoria")
        # Criar e exibir gr√°fico de barras horizontais
        fig_categoria = criar_grafico_distribuicao_categoria(df_filtrado)
        st.plotly_chart(fig_categoria, use_container_width=True)
    
    # -------------------------------------------------------------------------
    # SEGUNDA LINHA: GR√ÅFICO DE PIZZA E TABELA DETALHADA
    # -------------------------------------------------------------------------
    
    # Layout responsivo: 2 colunas com propor√ß√£o igual
    col1, col2 = st.columns([1, 1])
    
    # Gr√°fico de pizza na primeira coluna
    with col1:
        st.subheader("üéØ Distribui√ß√£o por Status")
        # Criar e exibir gr√°fico de pizza para status
        fig_status = criar_grafico_status_pizza(df_filtrado)
        st.plotly_chart(fig_status, use_container_width=True)
    
    # Tabela detalhada na segunda coluna
    with col2:
        st.subheader("üìã Dados Detalhados")
        
        # Criar tabela resumo com m√∫ltiplas agrega√ß√µes
        # Agrupar por categoria e status para an√°lise cruzada
        df_resumo = df_filtrado.groupby(['categoria', 'status']).agg({
            'valor': ['sum', 'mean', 'count'],   # Soma, m√©dia e contagem de valores
            'quantidade': 'sum'                  # Soma das quantidades
        }).round(2)  # Arredondar para 2 casas decimais
        
        # Renomear colunas para melhor legibilidade
        df_resumo.columns = ['Valor Total', 'Valor M√©dio', 'Registros', 'Quantidade Total']
        df_resumo = df_resumo.reset_index()  # Transformar √≠ndices em colunas
        
        # Exibir tabela interativa responsiva
        st.dataframe(df_resumo, use_container_width=True)
    
    # =============================================================================
    # INFORMA√á√ïES COMPLEMENTARES
    # =============================================================================
    
    # Separador visual para se√ß√£o final
    st.markdown("---")
    
    # Exibir rodap√© padr√£o com informa√ß√µes de fonte e atualiza√ß√£o
    exibir_info_atualizacao(FONTE_DADOS)
    
    # -------------------------------------------------------------------------
    # SE√á√ÉO EXPANS√çVEL COM INFORMA√á√ïES T√âCNICAS DETALHADAS
    # -------------------------------------------------------------------------
    
    # Expander oculta informa√ß√µes t√©cnicas para n√£o poluir interface
    with st.expander("‚ÑπÔ∏è Informa√ß√µes T√©cnicas"):
        # Layout em 2 colunas para organizar informa√ß√µes
        col1, col2 = st.columns(2)
        
        # Coluna 1: Informa√ß√µes temporais e quantitativas
        with col1:
            st.write("**Per√≠odo dos dados:**")
            # Formatar datas em formato brasileiro (dd/mm/yyyy)
            data_inicio = df['data'].min().strftime('%d/%m/%Y')
            data_fim = df['data'].max().strftime('%d/%m/%Y')
            st.write(f"De {data_inicio} at√© {data_fim}")
            
            st.write("**Total de registros:**")
            # Mostrar volume total de dados dispon√≠veis
            st.write(f"{len(df)} registros no dataset completo")
        
        # Coluna 2: Informa√ß√µes categ√≥ricas e estruturais
        with col2:
            st.write("**Categorias dispon√≠veis:**")
            # Listar todas as categorias √∫nicas ordenadas
            for categoria in sorted(df['categoria'].unique()):
                st.write(f"‚Ä¢ {categoria}")
            
            st.write("**Status poss√≠veis:**")
            # Listar todos os status √∫nicos ordenados
            for status in sorted(df['status'].unique()):
                st.write(f"‚Ä¢ {status}")

# =============================================================================
# PONTO DE ENTRADA PARA EXECU√á√ÉO INDEPENDENTE
# =============================================================================

if __name__ == "__main__":
    """
    Ponto de entrada para execu√ß√£o independente do m√≥dulo.
    
    Este bloco permite executar o m√≥dulo de forma standalone,
    facilitando desenvolvimento, testes e debug sem depender
    do sistema principal do dashboard IFPB-CZ.
    
    COMANDO PARA EXECU√á√ÉO:
    ---------------------
    streamlit run modules/new_modulo_exemplo.py
    
    UTILIDADE:
    ----------
    - Desenvolvimento isolado do m√≥dulo
    - Testes de funcionalidade espec√≠fica
    - Debug de visualiza√ß√µes e l√≥gica
    - Demonstra√ß√£o independente para stakeholders
    """
    # -------------------------------------------------------------------------
    # CONFIGURA√á√ÉO DA P√ÅGINA PARA EXECU√á√ÉO STANDALONE
    # -------------------------------------------------------------------------
    
    # Configurar metadados e layout da p√°gina Streamlit
    st.set_page_config(
        page_title=f"Dashboard {NOME_MODULO} - IFPB-CZ",  # T√≠tulo da aba do navegador
        page_icon="üìä",                                     # √çcone da aba
        layout="wide",                                      # Layout amplo para dashboards
        initial_sidebar_state="expanded"                    # Sidebar aberta por padr√£o
    )
    
    # Executar fun√ß√£o principal do dashboard
    mostrar_dashboard_exemplo()

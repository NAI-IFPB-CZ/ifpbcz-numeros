"""
============================================================================
                        M√ìDULO DE ENSINO - DASHBOARD IFPB-CZ
============================================================================

Este m√≥dulo implementa an√°lises completas sobre indicadores educacionais do 
Instituto Federal da Para√≠ba - Campus Cajazeiras (IFPB-CZ), apresentando 
m√©tricas detalhadas sobre alunos matriculados, formados, desistentes e 
transferidos.

FUNCIONALIDADES PRINCIPAIS:
- Dashboard interativo com KPIs consolidados do ensino
- An√°lises por campus, modalidade e curso com filtros din√¢micos  
- Visualiza√ß√µes temporais de evolu√ß√£o dos indicadores educacionais
- Compara√ß√£o rankings entre campus com tabelas detalhadas
- C√°lculo autom√°tico de taxas de forma√ß√£o, desist√™ncia e transfer√™ncia

ESTRUTURA DOS DADOS:
- Dados sint√©ticos gerados pelo DataGenerator
- Campos: campus, ano, modalidade, curso, matriculados, formados, desistentes, transferidos
- Agrega√ß√µes por m√∫ltiplos n√≠veis: campus, modalidade, curso, per√≠odo temporal

DEPEND√äNCIAS:
- streamlit: Interface web interativa
- pandas: Manipula√ß√£o e an√°lise de dados
- plotly.express/graph_objects: Visualiza√ß√µes gr√°ficas interativas
- utils: Fun√ß√µes auxiliares (cabe√ßalho, rodap√©, formata√ß√£o)

PADR√ÉO VISUAL:
- Cores institucionais IFPB: #1a8c73 (principal), #0d5a4e, #2db896
- Layout responsivo com containers CSS personalizados
- Gr√°ficos interativos com filtros din√¢micos

============================================================================
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from .utils import display_header_with_logo, display_footer

def ensino_module(data_gen):
    """
    M√≥dulo principal de an√°lise dos indicadores educacionais do IFPB-CZ.
    
    Processa e apresenta dados educacionais atrav√©s de dashboards interativos,
    incluindo KPIs consolidados, an√°lises temporais, compara√ß√µes entre campus
    e visualiza√ß√µes detalhadas por modalidade e curso.
    
    SE√á√ïES IMPLEMENTADAS:
    1. KPIs Consolidados - Cart√µes com indicadores principais
    2. An√°lise por Campus - Gr√°ficos com m√∫ltiplos filtros
    3. Evolu√ß√£o Temporal - S√©ries hist√≥ricas com tend√™ncias
    4. Compara√ß√£o Campus - Rankings e tabelas detalhadas
    
    Args:
        data_gen (DataGenerator): Inst√¢ncia para gera√ß√£o de dados sint√©ticos
                                 educacionais com estrutura padronizada
    
    Returns:
        None: Renderiza interface Streamlit com visualiza√ß√µes interativas
    """
    
    # ============= INICIALIZA√á√ÉO: CABE√áALHO E DADOS =============
    # Exibir cabe√ßalho institucional com logo IFPB
    display_header_with_logo("Ensino")
    
    # Gerar dados sint√©ticos educacionais usando DataGenerator
    dados_ensino = data_gen.gerar_dados_ensino()
    
    # ============= PROCESSAMENTO: C√ÅLCULO DE KPIs =============
    # Filtrar dados para o ano mais recente para m√©tricas consolidadas
    ano_atual = dados_ensino['ano'].max()                         # √öltimo ano dispon√≠vel
    dados_ano_atual = dados_ensino[dados_ensino['ano'] == ano_atual]  # Dados do ano atual
    
    # Calcular indicadores-chave (KPIs) consolidados para o ano atual
    total_matriculados = dados_ano_atual['matriculados'].sum()    # Total de alunos matriculados
    total_formados = dados_ano_atual['formados'].sum()            # Total de alunos formados  
    total_desistentes = dados_ano_atual['desistentes'].sum()      # Total de alunos desistentes
    total_transferidos = dados_ano_atual['transferidos'].sum()    # Total de alunos transferidos
    
    # ============= SE√á√ÉO 1: DISPLAY DE KPIs EDUCACIONAIS =============
    # Apresentar indicadores principais em formato de cart√µes visuais
    # Utiliza CSS personalizado para estiliza√ß√£o consistente dos containers
    
    # Criar layout em 4 colunas para exibi√ß√£o dos KPIs principais
    col1, col2, col3, col4 = st.columns(4)
    
    # KPI 1: Alunos Matriculados (indicador de capacidade institucional)
    with col1:
        st.markdown(f"""
        <div class="kpi-container">
            <div class="kpi-title">ALUNOS MATRICULADOS</div>
            <div class="kpi-value">{total_matriculados:,}</div>
        </div>
        """, unsafe_allow_html=True)
    
    # KPI 2: Alunos Formados (indicador de sucesso acad√™mico)
    with col2:
        st.markdown(f"""
        <div class="kpi-container">
            <div class="kpi-title">ALUNOS FORMADOS</div>
            <div class="kpi-value">{total_formados:,}</div>
        </div>
        """, unsafe_allow_html=True)
    
    # KPI 3: Desistentes (indicador de reten√ß√£o - quanto menor, melhor)
    with col3:
        st.markdown(f"""
        <div class="kpi-container">
            <div class="kpi-title">DESISTENTES</div>
            <div class="kpi-value">{total_desistentes:,}</div>
        </div>
        """, unsafe_allow_html=True)
    
    # KPI 4: Transferidos (indicador de mobilidade acad√™mica)
    with col4:
        st.markdown(f"""
        <div class="kpi-container">
            <div class="kpi-title">TRANSFERIDOS</div>
            <div class="kpi-value">{total_transferidos:,}</div>
        </div>
        """, unsafe_allow_html=True)
    
    # Separador visual entre se√ß√µes principais
    st.markdown("---")
    
    # ============= SE√á√ÉO 2: AN√ÅLISE DETALHADA POR CAMPUS =============
    # Gr√°fico interativo com m√∫ltiplos filtros para an√°lise granular por campus
    
    # Container CSS para estiliza√ß√£o consistente dos gr√°ficos
    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
    st.subheader("üìä N√∫mero de Alunos por Campus")
    st.write("**An√°lise detalhada com filtros por campus, modalidade e curso**")
    
    # ============= CONTROLES: FILTROS INTERATIVOS =============
    # Criar 4 colunas para organizar os controles de filtro de forma intuitiva
    col1, col2, col3, col4 = st.columns(4)
    
    # FILTRO 1: Sele√ß√£o m√∫ltipla de campus com op√ß√£o "Todos"
    with col1:
        # Preparar lista de campus dispon√≠veis (incluindo op√ß√£o "Todos")
        campus_disponivel = ["Todos"] + sorted(dados_ensino['campus'].unique())
        campus_selecionados = st.multiselect(
            "Selecione os Campus:",                        # Label descritivo
            options=campus_disponivel,                     # Op√ß√µes dispon√≠veis
            default=["Todos"],                             # Padr√£o: todos selecionados
            key="campus_multi_1"                           # Chave √∫nica para estado
        )
        
        # L√≥gica para processamento da sele√ß√£o de campus
        # Se "Todos" estiver selecionado, incluir todos os campus automaticamente
        if "Todos" in campus_selecionados:
            campus_filtro = dados_ensino['campus'].unique()
        else:
            campus_filtro = campus_selecionados
    
    # FILTRO 2: M√©trica espec√≠fica a ser exibida no gr√°fico
    with col2:
        forma_exibicao = st.selectbox(
            "Escolha a forma de exibi√ß√£o:",               # Label descritivo
            ["Matriculados", "Formados", "Desistentes", "Transferidos"],  # M√©tricas dispon√≠veis
            key="forma_exib_1"                            # Chave √∫nica para estado
        )
    
    # FILTRO 3: N√≠vel de detalhamento/granularidade dos dados
    with col3:
        nivel_detalhe = st.selectbox(
            "N√≠vel de detalhe:",                          # Label descritivo
            ["Geral", "Por Modalidade", "Por Curso"],    # Tr√™s n√≠veis de granularidade
            key="nivel_det_1"                             # Chave √∫nica para estado
        )
    
    # FILTRO 4: Ano de refer√™ncia para an√°lise temporal
    with col4:
        ano_selecionado = st.selectbox(
            "Ano:",                                       # Label descritivo
            sorted(dados_ensino['ano'].unique(), reverse=True),  # Anos em ordem decrescente
            key="ano_1"                                   # Chave √∫nica para estado
        )
    
    # ============= PROCESSAMENTO: APLICA√á√ÉO DE FILTROS =============
    # Aplicar filtros aos dados baseado nas sele√ß√µes interativas do usu√°rio
    dados_filtrados = dados_ensino[
        (dados_ensino['ano'] == ano_selecionado) &       # Filtro temporal
        (dados_ensino['campus'].isin(campus_filtro))      # Filtro por campus
    ]
    
    # ============= MAPEAMENTO: M√âTRICAS PARA COLUNAS =============
    # Mapear nomes amig√°veis das m√©tricas para nomes das colunas no DataFrame
    metrica_map = {
        "Matriculados": "matriculados",                   # Alunos matriculados
        "Formados": "formados",                           # Alunos formados
        "Desistentes": "desistentes",                     # Alunos desistentes
        "Transferidos": "transferidos"                    # Alunos transferidos
    }
    
    # ============= PROCESSAMENTO: AGRUPAMENTO POR N√çVEL DE DETALHE =============
    # Processar dados baseado no n√≠vel de granularidade selecionado
    if nivel_detalhe == "Geral":
        # Agrupamento simples por campus (vis√£o consolidada)
        dados_grafico = dados_filtrados.groupby('campus')[metrica_map[forma_exibicao]].sum().reset_index()
    elif nivel_detalhe == "Por Modalidade":
        # Agrupamento por campus e modalidade (presencial, EAD, etc.)
        dados_grafico = dados_filtrados.groupby(['campus', 'modalidade'])[metrica_map[forma_exibicao]].sum().reset_index()
    else:  # Por Curso
        # Agrupamento por campus e curso (maior n√≠vel de detalhamento)
        dados_grafico = dados_filtrados.groupby(['campus', 'curso'])[metrica_map[forma_exibicao]].sum().reset_index()
    
    # ============= VISUALIZA√á√ÉO: CRIA√á√ÉO DOS GR√ÅFICOS =============
    # Criar gr√°fico baseado no n√≠vel de detalhe selecionado
    if nivel_detalhe == "Geral":
        # Gr√°fico de barras simples (uma barra por campus)
        fig = px.bar(
            dados_grafico,
            x='campus',                                   # Eixo X: campus
            y=metrica_map[forma_exibicao],               # Eixo Y: m√©trica selecionada
            title=f"N¬∫ de {forma_exibicao} por Campus - {ano_selecionado}",  # T√≠tulo din√¢mico
            color_discrete_sequence=['#1a8c73']          # Cor institucional IFPB
        )
    elif nivel_detalhe == "Por Modalidade":
        # Gr√°fico de barras agrupadas por modalidade de ensino
        fig = px.bar(
            dados_grafico,
            x='campus',                                   # Eixo X: campus
            y=metrica_map[forma_exibicao],               # Eixo Y: m√©trica selecionada
            color='modalidade',                           # Agrupamento por modalidade
            title=f"N¬∫ de {forma_exibicao} por Campus e Modalidade - {ano_selecionado}",  # T√≠tulo din√¢mico
            color_discrete_sequence=['#1a8c73', '#0d5a4e', '#2db896']  # Paleta institucional
        )
    else:  # Por Curso
        # Gr√°fico de barras agrupadas por curso (maior detalhamento)
        fig = px.bar(
            dados_grafico,
            x='campus',                                   # Eixo X: campus
            y=metrica_map[forma_exibicao],               # Eixo Y: m√©trica selecionada
            color='curso',                                # Agrupamento por curso
            title=f"N¬∫ de {forma_exibicao} por Campus e Curso - {ano_selecionado}"  # T√≠tulo din√¢mico
        )
    
    # ============= CONFIGURA√á√ÉO: LAYOUT E FORMATA√á√ÉO =============
    # Configurar layout do gr√°fico para melhor apresenta√ß√£o
    fig.update_layout(
        xaxis_title="Campus",                            # T√≠tulo eixo X
        yaxis_title=f"N√∫mero de {forma_exibicao}",      # T√≠tulo eixo Y din√¢mico
        xaxis_tickangle=-45,                             # Rotacionar labels para legibilidade
        height=500,                                      # Altura fixa para consist√™ncia
        showlegend=True                                  # Exibir legenda quando aplic√°vel
    )
    
    # Renderizar gr√°fico interativo no Streamlit
    st.plotly_chart(fig, use_container_width=True)
    
    # Fonte dos dados e fechamento do container
    st.markdown('<div class="fonte-dados">Fonte de Dados: Sistema Acad√™mico IFPB</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # ============= SE√á√ÉO 3: EVOLU√á√ÉO TEMPORAL DOS INDICADORES =============
    # An√°lise de s√©ries temporais para identificar tend√™ncias ao longo dos anos
    
    # Container CSS para estiliza√ß√£o consistente
    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
    st.subheader("üìà Evolu√ß√£o do N√∫mero de Alunos")
    st.write("**An√°lise temporal com m√∫ltiplas op√ß√µes de visualiza√ß√£o**")
    
    # ============= CONTROLES: FILTROS PARA AN√ÅLISE TEMPORAL =============
    # Organizar controles em 3 colunas para an√°lise temporal
    col1, col2, col3 = st.columns(3)
    
    # FILTRO 1: Sele√ß√£o de campus para an√°lise temporal
    with col1:
        campus_evolucao = st.multiselect(
            "Escolha os Campus:",                         # Label descritivo
            options=["Todos"] + sorted(dados_ensino['campus'].unique()),  # Op√ß√µes dispon√≠veis
            default=["Todos"],                            # Padr√£o: todos selecionados
            key="campus_evolucao"                         # Chave √∫nica para estado
        )
        
        # Processar sele√ß√£o de campus (l√≥gica similar √† se√ß√£o anterior)
        if "Todos" in campus_evolucao:
            campus_filtro_evolucao = dados_ensino['campus'].unique()
        else:
            campus_filtro_evolucao = campus_evolucao
    
    # FILTRO 2: M√©trica espec√≠fica para an√°lise temporal
    with col2:
        forma_exibicao_2 = st.selectbox(
            "Forma de exibi√ß√£o:",                         # Label descritivo
            ["Matriculados", "Formados", "Desistentes", "Transferidos"],  # M√©tricas dispon√≠veis
            key="forma_exib_2"                            # Chave √∫nica para estado
        )
    
    # FILTRO 3: Tipo de visualiza√ß√£o gr√°fica temporal
    with col3:
        tipo_grafico = st.selectbox(
            "Tipo de gr√°fico:",                           # Label descritivo
            ["Linha", "√Årea", "Barras"],                 # Tipos de visualiza√ß√£o temporal
            key="tipo_grafico_evolucao"                   # Chave √∫nica para estado
        )
    
    # ============= PROCESSAMENTO: FILTRAR DADOS TEMPORAIS =============
    # Filtrar dados baseado nos campus selecionados para an√°lise temporal
    dados_evolucao = dados_ensino[dados_ensino['campus'].isin(campus_filtro_evolucao)]
    
    # ============= L√ìGICA: PROCESSAMENTO BASEADO NA SELE√á√ÉO =============
    # Processar dados de forma diferente baseado na quantidade de campus
    if len(campus_filtro_evolucao) == 1 and "Todos" not in campus_evolucao:
        # CASO 1: Campus espec√≠fico √∫nico selecionado
        # Agregar dados apenas por ano (s√©rie temporal simples)
        dados_evolucao = dados_evolucao.groupby('ano')[metrica_map[forma_exibicao_2]].sum().reset_index()
        titulo_grafico = f"Evolu√ß√£o do N¬∫ de {forma_exibicao_2} - {campus_filtro_evolucao[0]}"
        
        # Criar gr√°fico baseado no tipo selecionado (campus √∫nico)
        if tipo_grafico == "Linha":
            fig2 = px.line(
                dados_evolucao,
                x='ano',                                  # Eixo X: anos
                y=metrica_map[forma_exibicao_2],         # Eixo Y: m√©trica selecionada
                title=titulo_grafico,                     # T√≠tulo espec√≠fico do campus
                markers=True,                             # Exibir marcadores nos pontos
                color_discrete_sequence=['#1a8c73']      # Cor institucional IFPB
            )
        elif tipo_grafico == "√Årea":
            fig2 = px.area(
                dados_evolucao,
                x='ano',                                  # Eixo X: anos
                y=metrica_map[forma_exibicao_2],         # Eixo Y: m√©trica selecionada
                title=titulo_grafico,                     # T√≠tulo espec√≠fico do campus
                color_discrete_sequence=['#1a8c73']      # Cor institucional IFPB
            )
        else:  # Barras
            fig2 = px.bar(
                dados_evolucao,
                x='ano',                                  # Eixo X: anos
                y=metrica_map[forma_exibicao_2],         # Eixo Y: m√©trica selecionada
                title=titulo_grafico,                     # T√≠tulo espec√≠fico do campus
                color_discrete_sequence=['#1a8c73']      # Cor institucional IFPB
            )
            fig2 = px.bar(
                dados_evolucao,
                x='ano',
                y=metrica_map[forma_exibicao_2],
                title=titulo_grafico,
                color_discrete_sequence=['#1a8c73']
            )
    else:
        # CASO 2: M√∫ltiplos campus ou "Todos" selecionado
        if "Todos" in campus_evolucao:
            # Agregar todos os campus em uma √∫nica s√©rie temporal consolidada
            dados_evolucao = dados_ensino.groupby('ano')[metrica_map[forma_exibicao_2]].sum().reset_index()
            titulo_grafico = f"Evolu√ß√£o do N¬∫ de {forma_exibicao_2} - Todos os Campus"
        else:
            # Manter separa√ß√£o por campus (m√∫ltiplas s√©ries temporais)
            dados_evolucao = dados_evolucao.groupby(['ano', 'campus'])[metrica_map[forma_exibicao_2]].sum().reset_index()
            titulo_grafico = f"Evolu√ß√£o do N¬∫ de {forma_exibicao_2} - Campus Selecionados"
        
        # ============= VISUALIZA√á√ÉO: GR√ÅFICOS PARA M√öLTIPLOS CAMPUS =============
        # Criar gr√°fico baseado no tipo selecionado (m√∫ltiplos campus)
        if tipo_grafico == "Linha":
            if 'campus' in dados_evolucao.columns:
                # M√∫ltiplas linhas (uma linha por campus)
                fig2 = px.line(
                    dados_evolucao,
                    x='ano',                              # Eixo X: anos
                    y=metrica_map[forma_exibicao_2],     # Eixo Y: m√©trica selecionada
                    color='campus',                       # Cor diferente para cada campus
                    title=titulo_grafico,                 # T√≠tulo din√¢mico
                    markers=True                          # Exibir marcadores nos pontos
                )
            else:
                # Linha √∫nica (todos os campus agregados)
                fig2 = px.line(
                    dados_evolucao,
                    x='ano',                              # Eixo X: anos
                    y=metrica_map[forma_exibicao_2],     # Eixo Y: m√©trica selecionada
                    title=titulo_grafico,                 # T√≠tulo din√¢mico
                    markers=True,                         # Exibir marcadores nos pontos
                    color_discrete_sequence=['#1a8c73']  # Cor institucional IFPB
                )
                # Linha √∫nica (todos os campus agregados)
                fig2 = px.line(
                    dados_evolucao,
                    x='ano',
                    y=metrica_map[forma_exibicao_2],
                    title=titulo_grafico,
                    markers=True,
                    color_discrete_sequence=['#1a8c73']
                )
        elif tipo_grafico == "√Årea":
            if 'campus' in dados_evolucao.columns:
                # M√∫ltiplas √°reas empilhadas por campus
                fig2 = px.area(
                    dados_evolucao,
                    x='ano',                              # Eixo X: anos
                    y=metrica_map[forma_exibicao_2],     # Eixo Y: m√©trica selecionada
                    color='campus',                       # Empilhamento por campus
                    title=titulo_grafico                  # T√≠tulo din√¢mico
                )
            else:
                # √Årea √∫nica (todos os campus agregados)
                fig2 = px.area(
                    dados_evolucao,
                    x='ano',                              # Eixo X: anos
                    y=metrica_map[forma_exibicao_2],     # Eixo Y: m√©trica selecionada
                    title=titulo_grafico,                 # T√≠tulo din√¢mico
                    color_discrete_sequence=['#1a8c73']  # Cor institucional IFPB
                )
        else:  # Barras
            if 'campus' in dados_evolucao.columns:
                # Barras agrupadas por campus
                fig2 = px.bar(
                    dados_evolucao,
                    x='ano',                              # Eixo X: anos
                    y=metrica_map[forma_exibicao_2],     # Eixo Y: m√©trica selecionada
                    color='campus',                       # Agrupamento por campus
                    title=titulo_grafico,                 # T√≠tulo din√¢mico
                    barmode='group'                       # Barras lado a lado
                )
            else:
                # Barras simples (todos os campus agregados)
                fig2 = px.bar(
                    dados_evolucao,
                    x='ano',                              # Eixo X: anos
                    y=metrica_map[forma_exibicao_2],     # Eixo Y: m√©trica selecionada
                    title=titulo_grafico,                 # T√≠tulo din√¢mico
                    color_discrete_sequence=['#1a8c73']  # Cor institucional IFPB
                )
    # ============= CONFIGURA√á√ÉO: LAYOUT DO GR√ÅFICO TEMPORAL =============
    # Configurar layout para melhor apresenta√ß√£o da evolu√ß√£o temporal
    fig2.update_layout(
        xaxis_title="Ano",                               # T√≠tulo eixo X
        yaxis_title=f"N√∫mero de {forma_exibicao_2}",    # T√≠tulo eixo Y din√¢mico
        height=500,                                      # Altura fixa para consist√™ncia
        showlegend=True                                  # Exibir legenda quando aplic√°vel
    )
    
    # Renderizar gr√°fico temporal interativo
    st.plotly_chart(fig2, use_container_width=True)
    
    # Fonte dos dados e fechamento do container
    st.markdown('<div class="fonte-dados">Fonte de Dados: Sistema Acad√™mico IFPB</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)

    # ============= SE√á√ÉO 4: AN√ÅLISE COMPARATIVA ENTRE CAMPUS =============
    # Ranking de campus com tabelas detalhadas e c√°lculo de indicadores
    
    # Container CSS para estiliza√ß√£o consistente
    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
    st.subheader("üèõÔ∏è Compara√ß√£o entre Campus")
    st.write("**An√°lise comparativa com rankings e indicadores de desempenho**")
    
    # ============= CONTROLES: FILTROS PARA AN√ÅLISE COMPARATIVA =============
    # Organizar controles em 3 colunas para sele√ß√£o de par√¢metros
    col1, col2, col3 = st.columns(3)
    
    # FILTRO 1: Sele√ß√£o limitada de campus para evitar polui√ß√£o visual
    with col1:
        campus_comparacao = st.multiselect(
            "Selecione at√© 10 Campus para comparar:",     # Label com orienta√ß√£o
            options=sorted(dados_ensino['campus'].unique()),  # Campus ordenados alfabeticamente
            default=sorted(dados_ensino['campus'].unique())[:5],  # Padr√£o: primeiros 5
            max_selections=10,                            # Limite m√°ximo para visualiza√ß√£o
            key="campus_comparacao"                       # Chave √∫nica para estado
        )
    
    # FILTRO 2: M√©trica espec√≠fica para base da compara√ß√£o
    with col2:
        metrica_comparacao = st.selectbox(
            "M√©trica para compara√ß√£o:",                   # Label descritivo
            ["Matriculados", "Formados", "Desistentes", "Transferidos"],  # M√©tricas dispon√≠veis
            key="metrica_comparacao"                      # Chave √∫nica para estado
        )
    
    # FILTRO 3: Per√≠odo temporal para an√°lise agregada
    with col3:
        periodo_comparacao = st.selectbox(
            "Per√≠odo:",                                   # Label descritivo
            ["√öltimo Ano", "√öltimos 3 Anos", "√öltimos 5 Anos", "Todos os Anos"],  # Per√≠odos
            key="periodo_comparacao"                      # Chave √∫nica para estado
        )
    
    # ============= VALIDA√á√ÉO: VERIFICAR CAMPUS SELECIONADOS =============
    # Verificar se h√° campus selecionados para realizar compara√ß√£o
    if campus_comparacao:
        # ============= PROCESSAMENTO: FILTRAR DADOS POR PER√çODO =============
        # Aplicar filtro temporal baseado no per√≠odo selecionado
        if periodo_comparacao == "√öltimo Ano":
            dados_comp = dados_ensino[dados_ensino['ano'] == dados_ensino['ano'].max()]
        elif periodo_comparacao == "√öltimos 3 Anos":
            dados_comp = dados_ensino[dados_ensino['ano'] >= dados_ensino['ano'].max() - 2]
        elif periodo_comparacao == "√öltimos 5 Anos":
            dados_comp = dados_ensino[dados_ensino['ano'] >= dados_ensino['ano'].max() - 4]
        else:  # Todos os anos
            dados_comp = dados_ensino.copy()
        
        # Aplicar filtro de campus selecionados para compara√ß√£o
        dados_comp = dados_comp[dados_comp['campus'].isin(campus_comparacao)]
        
        # ============= PROCESSAMENTO: AGREGA√á√ÉO E RANKING =============
        # Agregar dados por campus para o per√≠odo selecionado
        dados_comp_grouped = dados_comp.groupby('campus')[metrica_map[metrica_comparacao]].sum().reset_index()
        # Ordenar em ordem decrescente para criar ranking autom√°tico
        dados_comp_grouped = dados_comp_grouped.sort_values(metrica_map[metrica_comparacao], ascending=False)
        
        # ============= VISUALIZA√á√ÉO: GR√ÅFICO DE RANKING =============
        # Criar gr√°fico de barras horizontais para melhor visualiza√ß√£o do ranking
        fig3 = px.bar(
            dados_comp_grouped,
            x=metrica_map[metrica_comparacao],               # Eixo X: valores da m√©trica
            y='campus',                                      # Eixo Y: nomes dos campus
            orientation='h',                                 # Barras horizontais para ranking
            title=f"Compara√ß√£o: {metrica_comparacao} - {periodo_comparacao}",  # T√≠tulo din√¢mico
            color=metrica_map[metrica_comparacao],          # Cor baseada no valor
            color_continuous_scale='Viridis',  # Escala de cores
            text=metrica_map[metrica_comparacao]  # Mostrar valores nas barras
        )
        
        # Configura√ß√µes do gr√°fico comparativo
        fig3.update_layout(
            xaxis_title=f"N√∫mero de {metrica_comparacao}",
            yaxis_title="Campus",
            height=max(400, len(campus_comparacao) * 40),  # Altura din√¢mica baseada no n√∫mero de campus
            showlegend=False  # Remover legenda desnecess√°ria
        )
        
        # Configurar posi√ß√£o dos textos nas barras
        fig3.update_traces(texttemplate='%{text}', textposition='outside')
        
        # Renderizar gr√°fico comparativo
        st.plotly_chart(fig3, use_container_width=True)
        
        # ==================== TABELA DETALHADA DE INDICADORES ====================
        st.subheader("üìã Dados Detalhados")
        
        # Criar tabela resumo com todos os indicadores e taxas calculadas
        dados_resumo = dados_comp.groupby('campus').agg({
            'matriculados': 'sum',
            'formados': 'sum',
            'desistentes': 'sum',
            'transferidos': 'sum'
        }).reset_index()
        
        # Calcular taxas percentuais para an√°lise de desempenho
        dados_resumo['taxa_formacao'] = (dados_resumo['formados'] / dados_resumo['matriculados'] * 100).round(1)
        dados_resumo['taxa_desistencia'] = (dados_resumo['desistentes'] / dados_resumo['matriculados'] * 100).round(1)
        dados_resumo['taxa_transferencia'] = (dados_resumo['transferidos'] / dados_resumo['matriculados'] * 100).round(1)
        
        # ============= FORMATA√á√ÉO: RENOMEAR COLUNAS PARA APRESENTA√á√ÉO =============
        # Renomear colunas para nomes amig√°veis na interface do usu√°rio
        dados_resumo.columns = [
            'Campus', 'Matriculados', 'Formados', 'Desistentes', 'Transferidos',
            'Taxa Forma√ß√£o (%)', 'Taxa Desist√™ncia (%)', 'Taxa Transfer√™ncia (%)'
        ]
        
        # Ordenar tabela por n√∫mero de matriculados (indicador de tamanho do campus)
        dados_resumo = dados_resumo.sort_values('Matriculados', ascending=False)
        
        # ============= EXIBI√á√ÉO: TABELA INTERATIVA =============
        # Renderizar tabela interativa com dados detalhados
        st.dataframe(dados_resumo, use_container_width=True, hide_index=True)
    
    else:
        # ============= AVISO: NENHUM CAMPUS SELECIONADO =============
        # Exibir mensagem de orienta√ß√£o quando nenhum campus √© selecionado
        st.warning("‚ö†Ô∏è Selecione pelo menos um campus para realizar a compara√ß√£o.")
    
    # Fonte dos dados e fechamento do container CSS
    st.markdown('<div class="fonte-dados">Fonte de Dados: Sistema Acad√™mico IFPB</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)

    # ============= RODAP√â: INFORMA√á√ïES INSTITUCIONAIS =============
    # Exibir rodap√© padr√£o do sistema com informa√ß√µes gerais
    display_footer()

# ============================================================================
# M√ìDULO DE AN√ÅLISE DE SERVIDORES - DASHBOARD IFPB CAMPUS CAJAZEIRAS
# ============================================================================
"""
DESCRI√á√ÉO DO M√ìDULO:
Este m√≥dulo fornece an√°lises abrangentes sobre o quadro de servidores do IFPB Campus Cajazeiras,
incluindo evolu√ß√£o temporal, distribui√ß√£o por unidades, propor√ß√µes funcionais e taxas de crescimento.

FUNCIONALIDADES PRINCIPAIS:
1. Indicadores consolidados (KPIs) do quadro de pessoal
2. Evolu√ß√£o temporal do n√∫mero de servidores por categoria
3. Distribui√ß√£o de servidores entre unidades organizacionais
4. An√°lise proporcional entre docentes e t√©cnicos administrativos
5. C√°lculo e visualiza√ß√£o de taxas de crescimento anual

ESTRUTURA DE DADOS:
- Dados de servidores por ano, unidade e categoria profissional
- M√©tricas: total de servidores, docentes, t√©cnicos administrativos
- Dimens√µes temporais: 2013-2025 (dados hist√≥ricos e proje√ß√µes)
- Dimens√µes espaciais: unidades administrativas do campus

DEPEND√äNCIAS:
- Streamlit: Interface web e componentes interativos
- Pandas: Manipula√ß√£o e processamento de dados
- Plotly Express/Graph Objects: Visualiza√ß√µes interativas
- Utils: Componentes visuais padronizados (cabe√ßalho, rodap√©)

PADR√ïES VISUAIS:
- Cores institucionais IFPB: #1a8c73 (principal), #0d5a4e, #2db896
- Gr√°ficos responsivos com interatividade Plotly
- Layout em containers estilizados com CSS personalizado
- KPIs em formato de cart√µes visuais destacados
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from .utils import display_header_with_logo, display_footer

def servidores_module(data_gen):
    """
    M√≥dulo principal para an√°lise do quadro de servidores do IFPB Campus Cajazeiras.
    
    Este m√≥dulo apresenta uma vis√£o abrangente do quadro de pessoal da institui√ß√£o,
    oferecendo an√°lises temporais, distribucionais e comparativas atrav√©s de 
    visualiza√ß√µes interativas e indicadores consolidados.
    
    SE√á√ïES PRINCIPAIS:
    1. KPIs Consolidados - Indicadores principais do quadro atual
    2. Evolu√ß√£o Temporal - An√°lise longitudinal do crescimento de pessoal
    3. Distribui√ß√£o por Unidade - An√°lise espacial entre setores
    4. Propor√ß√£o Funcional - Compara√ß√£o entre categorias profissionais
    5. Taxa de Crescimento - Indicadores de expans√£o anual
    
    PAR√ÇMETROS:
    -----------
    data_gen : object
        Gerador de dados contendo informa√ß√µes dos servidores
        Estrutura esperada: ano, unidade, total_servidores, docentes, tecnicos
    
    RETORNO:
    --------
    None
        Renderiza interface Streamlit com visualiza√ß√µes e an√°lises interativas
    
    FUNCIONALIDADES INTERATIVAS:
    - Filtros por unidade e per√≠odo temporal
    - Sele√ß√£o de categorias profissionais para an√°lise espec√≠fica
    - Gr√°ficos responsivos com hover e zoom
    - Exporta√ß√£o de dados atrav√©s de componentes Plotly
    """
    
    # ============= CONFIGURA√á√ÉO INICIAL E CARREGAMENTO DE DADOS =============
    # Exibi√ß√£o do cabe√ßalho institucional padronizado
    display_header_with_logo("Servidores")
    
    # Gera√ß√£o/carregamento dos dados de servidores
    # Obt√©m dataset completo com informa√ß√µes hist√≥ricas e atuais
    dados_servidores = data_gen.gerar_dados_servidores()
    
    # Filtro para dados do ano corrente (2025) para c√°lculo de KPIs
    # Subset espec√≠fico para indicadores consolidados atuais
    dados_2025 = dados_servidores[dados_servidores['ano'] == 2025]
    
    # ============= C√ÅLCULO DE INDICADORES-CHAVE (KPIs) =============
    # Consolida√ß√£o dos principais indicadores do quadro de pessoal atual
    # Agrega√ß√£o de dados para vis√£o institucional consolidada
    
    # KPI 1: Total geral de servidores ativos no campus
    total_servidores = dados_2025['total_servidores'].sum()
    
    # KPI 2: Total de servidores t√©cnicos administrativos
    total_tecnicos = dados_2025['tecnicos'].sum()
    
    # KPI 3: Total de servidores docentes (professores)
    total_docentes = dados_2025['docentes'].sum()
    
    # ============= SE√á√ÉO 1: DISPLAY DE KPIs DO QUADRO DE SERVIDORES =============
    # Apresentar indicadores principais em formato de cart√µes visuais
    # Layout em 3 colunas para exibi√ß√£o equilibrada dos KPIs
    # Layout em 3 colunas para exibi√ß√£o equilibrada dos KPIs
    col1, col2, col3 = st.columns(3)
    
    # KPI 1: Total de Servidores (indicador global de for√ßa de trabalho)
    with col1:
        st.markdown(f"""
        <div class="kpi-container">
            <div class="kpi-title">SERVIDORES</div>
            <div class="kpi-value">{total_servidores:,}</div>
        </div>
        """, unsafe_allow_html=True)
    
    # KPI 2: Servidores T√©cnicos (pessoal de apoio administrativo)
    with col2:
        st.markdown(f"""
        <div class="kpi-container">
            <div class="kpi-title">T√âCNICOS</div>
            <div class="kpi-value">{total_tecnicos:,}</div>
        </div>
        """, unsafe_allow_html=True)
    
    # KPI 3: Servidores Docentes (corpo professoral ativo)
    with col3:
        st.markdown(f"""
        <div class="kpi-container">
            <div class="kpi-title">DOCENTES</div>
            <div class="kpi-value">{total_docentes:,}</div>
        </div>
        """, unsafe_allow_html=True)
    
    # Separador visual entre se√ß√µes principais
    st.markdown("---")
    
    # ============= SE√á√ÉO 2: EVOLU√á√ÉO TEMPORAL DO QUADRO DE SERVIDORES =============
    # An√°lise longitudinal da evolu√ß√£o do pessoal ao longo dos anos
    # Visualiza√ß√£o da tend√™ncia de crescimento e distribui√ß√£o por categoria
    
    # Subsse√ß√£o A: Container principal para evolu√ß√£o temporal
    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
    st.subheader("üìà Evolu√ß√£o do N√∫mero de Servidores")
    
    # Filtro interativo para sele√ß√£o de unidade espec√≠fica ou vis√£o geral
    # Permite an√°lise tanto institucional quanto setorial
    unidade_selecionada = st.selectbox(
        "Selecione a unidade:",
        ["Todas"] + list(dados_servidores['unidade'].unique()),
        key="unidade_servidores"
    )
    
    # Processamento condicional dos dados baseado na sele√ß√£o
    # Agrega√ß√£o institucional ou filtro espec√≠fico por unidade
    if unidade_selecionada == "Todas":
        # Vis√£o consolidada: agregar dados de todas as unidades por ano
        dados_filtrados = dados_servidores.groupby('ano').agg({
            'total_servidores': 'sum',  # Soma total de servidores
            'docentes': 'sum',          # Soma de docentes
            'tecnicos': 'sum'           # Soma de t√©cnicos
        }).reset_index()
        titulo_grafico = "Evolu√ß√£o do N√∫mero de Servidores - Todas as Unidades"
    else:
        # Vis√£o espec√≠fica: filtrar dados da unidade selecionada
        dados_filtrados = dados_servidores[dados_servidores['unidade'] == unidade_selecionada]
        titulo_grafico = f"Evolu√ß√£o do N√∫mero de Servidores - {unidade_selecionada}"
    
    # Cria√ß√£o do gr√°fico de √°rea empilhada para visualiza√ß√£o temporal
    # Uso do Plotly Graph Objects para maior controle de customiza√ß√£o
    fig = go.Figure()
    
    # S√©rie 1: Total de Servidores (linha principal de refer√™ncia)
    # Linha mais destacada representando o conjunto total
    fig.add_trace(go.Scatter(
        x=dados_filtrados['ano'],                    # Eixo temporal
        y=dados_filtrados['total_servidores'],       # Total de servidores
        mode='lines+markers',                        # Linha com marcadores
        name='Total Servidores',                     # Legenda da s√©rie
        line=dict(color='#1a8c73', width=3),        # Cor institucional, linha espessa
        fill='tonexty'                               # Preenchimento at√© pr√≥xima s√©rie
    ))
    
    # S√©rie 2: Servidores Docentes (professores)
    # Visualiza√ß√£o da componente docente do quadro
    fig.add_trace(go.Scatter(
        x=dados_filtrados['ano'],                    # Eixo temporal
        y=dados_filtrados['docentes'],               # N√∫mero de docentes
        mode='lines+markers',                        # Linha com marcadores
        name='Servidores Professores',               # Legenda da s√©rie
        line=dict(color='#0d5a4e', width=2),        # Cor secund√°ria institucional
        fill='tonexty'                               # Preenchimento at√© pr√≥xima s√©rie
    ))
    
    # S√©rie 3: Servidores T√©cnicos (pessoal administrativo)
    # Visualiza√ß√£o da componente t√©cnica do quadro
    fig.add_trace(go.Scatter(
        x=dados_filtrados['ano'],                    # Eixo temporal
        y=dados_filtrados['tecnicos'],               # N√∫mero de t√©cnicos
        mode='lines+markers',                        # Linha com marcadores
        name='Servidores T√©cnicos',                  # Legenda da s√©rie
        line=dict(color='#2db896', width=2),        # Cor terci√°ria institucional
        fill='tozeroy'                               # Preenchimento at√© zero
    ))
    
    # Customiza√ß√£o do layout e formata√ß√£o do gr√°fico
    fig.update_layout(
        title=titulo_grafico,                        # T√≠tulo din√¢mico baseado na sele√ß√£o
        xaxis_title="Ano",                           # R√≥tulo do eixo X
        yaxis_title="N√∫mero de Servidores",          # R√≥tulo do eixo Y
        height=500,                                  # Altura do gr√°fico
        hovermode='x unified',                       # Modo de hover unificado
        plot_bgcolor='rgba(0,0,0,0)',               # Fundo transparente
        paper_bgcolor='rgba(0,0,0,0)',              # Papel transparente
        font=dict(family="Arial", size=12)           # Fonte padr√£o
    )
    
    # Formata√ß√£o da grade para melhor legibilidade
    fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
    fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
    
    # Renderiza√ß√£o do gr√°fico no Streamlit
    st.plotly_chart(fig, use_container_width=True)
    
    # Informa√ß√£o sobre fonte dos dados (transpar√™ncia e credibilidade)
    st.markdown('<div class="fonte-dados">Fonte de Dados: Portal da Transpar√™ncia</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # ============= SE√á√ÉO 3: DISTRIBUI√á√ÉO DE SERVIDORES POR UNIDADE =============
    # An√°lise espacial da distribui√ß√£o do quadro entre unidades organizacionais
    # Permite identificar concentra√ß√£o de pessoal e necessidades setoriais
    
    # Subsse√ß√£o A: Container para an√°lise distributiva por unidade
    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
    st.subheader("üìä Distribui√ß√£o de Servidores por Unidade")
    
    # Layout de filtros em duas colunas para sele√ß√£o de par√¢metros
    col1, col2 = st.columns(2)
    
    # Filtro 1: Sele√ß√£o do ano para an√°lise distributiva
    # Ordena√ß√£o decrescente para priorizar dados recentes
    with col1:
        ano_distribuicao = st.selectbox(
            "Ano:",
            sorted(dados_servidores['ano'].unique(), reverse=True),
            key="ano_distribuicao"
        )
    
    # Filtro 2: Sele√ß√£o do tipo de servidor para an√°lise espec√≠fica
    # Op√ß√µes entre total, docentes ou t√©cnicos para vis√µes direcionadas
    with col2:
        tipo_servidor = st.selectbox(
            "Tipo de Servidor:",
            ["Total", "Docentes", "T√©cnicos"],
            key="tipo_servidor"
        )
    
    # Aplicar filtro temporal nos dados
    # Subset dos dados baseado no ano selecionado
    dados_distribuicao = dados_servidores[dados_servidores['ano'] == ano_distribuicao]
    
    # Mapeamento do tipo selecionado para coluna correspondente
    # Dicion√°rio de correspond√™ncia entre interface e dados
    mapeamento_tipo = {
        "Total": "total_servidores",  # Coluna para total de servidores
        "Docentes": "docentes",       # Coluna para docentes
        "T√©cnicos": "tecnicos"        # Coluna para t√©cnicos
    }
    
    # Obter a coluna correspondente ao tipo selecionado
    coluna_tipo = mapeamento_tipo[tipo_servidor]
    
    # Cria√ß√£o do gr√°fico de barras para distribui√ß√£o por unidade
    # Visualiza√ß√£o comparativa entre unidades organizacionais
    fig2 = px.bar(
        dados_distribuicao,
        x='unidade',                                  # Eixo X com nomes das unidades
        y=coluna_tipo,                                # Eixo Y com quantidade selecionada
        title=f"Distribui√ß√£o de {tipo_servidor} por Unidade - {ano_distribuicao}",
        color_discrete_sequence=['#1a8c73']          # Cor institucional IFPB
    )
    
    # Customiza√ß√£o do layout do gr√°fico distributivo
    fig2.update_layout(
        xaxis_title="Unidade",
        yaxis_title=f"N√∫mero de {tipo_servidor}",    # R√≥tulo din√¢mico baseado no tipo
        xaxis_tickangle=-45,                          # Rota√ß√£o dos r√≥tulos para legibilidade
        height=400,                                   # Altura padr√£o do gr√°fico
        plot_bgcolor='rgba(0,0,0,0)',                # Fundo transparente
        paper_bgcolor='rgba(0,0,0,0)',               # Papel transparente
        font=dict(family="Arial", size=12)            # Fonte padr√£o
    )
    
    # Formata√ß√£o da grade para melhor legibilidade
    fig2.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
    fig2.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
    
    # Renderiza√ß√£o do gr√°fico de distribui√ß√£o
    st.plotly_chart(fig2, use_container_width=True)
    
    # Informa√ß√£o sobre fonte dos dados (transpar√™ncia e credibilidade)
    st.markdown('<div class="fonte-dados">Fonte de Dados: Portal da Transpar√™ncia</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # ============= SE√á√ÉO 4: PROPOR√á√ÉO ENTRE CATEGORIAS PROFISSIONAIS =============
    # An√°lise comparativa entre docentes e t√©cnicos administrativos
    # Permite avaliar equilibrio e composi√ß√£o do quadro de pessoal
    
    # Subsse√ß√£o A: Container para an√°lise proporcional
    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
    st.subheader("üìä Propor√ß√£o Docentes vs T√©cnicos")
    
    # Layout de filtros em duas colunas para sele√ß√£o de par√¢metros
    col1, col2 = st.columns(2)
    
    # Filtro 1: Sele√ß√£o do ano para an√°lise proporcional
    # Ordena√ß√£o decrescente para priorizar dados recentes
    with col1:
        ano_proporcao = st.selectbox(
            "Ano:",
            sorted(dados_servidores['ano'].unique(), reverse=True),
            key="ano_proporcao"
        )
    
    # Filtro 2: Sele√ß√£o da unidade para an√°lise espec√≠fica ou geral
    # Op√ß√£o "Todas" para vis√£o institucional consolidada
    with col2:
        unidade_proporcao = st.selectbox(
            "Unidade:",
            ["Todas"] + list(dados_servidores['unidade'].unique()),
            key="unidade_proporcao"
        )
    
    # Aplicar filtros temporais e espaciais nos dados
    # Subset inicial baseado no ano selecionado
    dados_proporcao = dados_servidores[dados_servidores['ano'] == ano_proporcao]
    
    # Aplicar filtro de unidade se especificado
    # Refinamento adicional por unidade administrativa
    if unidade_proporcao != "Todas":
        dados_proporcao = dados_proporcao[dados_proporcao['unidade'] == unidade_proporcao]
    
    # Calcular totais agregados para an√°lise proporcional
    # Somat√≥ria de cada categoria profissional
    total_docentes_prop = dados_proporcao['docentes'].sum()
    total_tecnicos_prop = dados_proporcao['tecnicos'].sum()
    
    # Preparar dados estruturados para o gr√°fico de pizza
    # DataFrame espec√≠fico para visualiza√ß√£o proporcional
    dados_pizza = pd.DataFrame({
        'Tipo': ['Docentes', 'T√©cnicos'],             # Categorias profissionais
        'Quantidade': [total_docentes_prop, total_tecnicos_prop]  # Valores correspondentes
    })
    
    # Cria√ß√£o do gr√°fico de pizza para visualiza√ß√£o proporcional
    # Gr√°fico circular ideal para mostrar distribui√ß√£o entre duas categorias
    fig3 = px.pie(
        dados_pizza,
        values='Quantidade',                          # Valores para c√°lculo das fatias
        names='Tipo',                                 # R√≥tulos das categorias
        title=f"Propor√ß√£o Docentes vs T√©cnicos - {ano_proporcao}" + (f" - {unidade_proporcao}" if unidade_proporcao != "Todas" else ""),
        color_discrete_sequence=['#1a8c73', '#0d5a4e']  # Cores institucionais IFPB
    )
    
    # Customiza√ß√£o das informa√ß√µes exibidas no gr√°fico
    # Exibir percentual e r√≥tulo dentro das fatias
    fig3.update_traces(
        textposition='inside',                        # Posicionamento interno do texto
        textinfo='percent+label',                     # Informa√ß√µes a serem exibidas
        textfont_size=14                              # Tamanho da fonte para legibilidade
    )
    
    # Customiza√ß√£o do layout do gr√°fico de pizza
    fig3.update_layout(
        height=400,                                   # Altura padr√£o do gr√°fico
        font=dict(family="Arial", size=12)            # Fonte padr√£o para consist√™ncia
    )
    
    # Renderiza√ß√£o do gr√°fico de propor√ß√£o
    st.plotly_chart(fig3, use_container_width=True)
    
    # Informa√ß√£o sobre fonte dos dados (transpar√™ncia e credibilidade)
    st.markdown('<div class="fonte-dados">Fonte de Dados: Portal da Transpar√™ncia</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # ============= SE√á√ÉO 5: AN√ÅLISE DE TAXAS DE CRESCIMENTO ANUAL =============
    # C√°lculo e visualiza√ß√£o de indicadores de expans√£o do quadro de pessoal
    # Permite monitorar tend√™ncias de contrata√ß√£o e crescimento institucional
    
    # Subsse√ß√£o A: Container para an√°lise de crescimento
    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
    st.subheader("üìà Taxa de Crescimento Anual")
    
    # Agrega√ß√£o temporal para c√°lculo de crescimento institucional
    # Consolida√ß√£o de dados anuais para todas as unidades
    dados_crescimento = dados_servidores.groupby('ano').agg({
        'total_servidores': 'sum',  # Soma total de servidores por ano
        'docentes': 'sum',          # Soma de docentes por ano
        'tecnicos': 'sum'           # Soma de t√©cnicos por ano
    }).reset_index()
    
    # C√°lculo de percentuais de crescimento ano a ano
    # Uso da fun√ß√£o pct_change() para varia√ß√£o percentual
    dados_crescimento['crescimento_total'] = dados_crescimento['total_servidores'].pct_change() * 100
    dados_crescimento['crescimento_docentes'] = dados_crescimento['docentes'].pct_change() * 100
    dados_crescimento['crescimento_tecnicos'] = dados_crescimento['tecnicos'].pct_change() * 100
    
    # Remo√ß√£o do primeiro ano (sem crescimento calcul√°vel)
    # Filtro para anos com dados de crescimento v√°lidos
    dados_crescimento = dados_crescimento[dados_crescimento['ano'] > 2013]
    
    # Cria√ß√£o do gr√°fico de linhas m√∫ltiplas para crescimento
    # Uso do Plotly Graph Objects para controle avan√ßado
    fig4 = go.Figure()
    
    # S√©rie 1: Crescimento total de servidores (linha principal)
    fig4.add_trace(go.Scatter(
        x=dados_crescimento['ano'],                   # Eixo temporal
        y=dados_crescimento['crescimento_total'],     # Taxa de crescimento total
        mode='lines+markers',                         # Linha com marcadores
        name='Total Servidores',                      # Legenda da s√©rie
        line=dict(color='#1a8c73', width=3)          # Cor institucional, linha espessa
    ))
    
    # S√©rie 2: Crescimento de docentes
    fig4.add_trace(go.Scatter(
        x=dados_crescimento['ano'],                   # Eixo temporal
        y=dados_crescimento['crescimento_docentes'],  # Taxa de crescimento de docentes
        mode='lines+markers',                         # Linha com marcadores
        name='Docentes',                              # Legenda da s√©rie
        line=dict(color='#0d5a4e', width=2)          # Cor secund√°ria institucional
    ))
    
    # S√©rie 3: Crescimento de t√©cnicos
    fig4.add_trace(go.Scatter(
        x=dados_crescimento['ano'],                   # Eixo temporal
        y=dados_crescimento['crescimento_tecnicos'],  # Taxa de crescimento de t√©cnicos
        mode='lines+markers',                         # Linha com marcadores
        name='T√©cnicos',                              # Legenda da s√©rie
        line=dict(color='#2db896', width=2)          # Cor terci√°ria institucional
    ))
    
    # Customiza√ß√£o do layout do gr√°fico de crescimento
    fig4.update_layout(
        title="Taxa de Crescimento Anual de Servidores",
        xaxis_title="Ano",                           # R√≥tulo do eixo X
        yaxis_title="Taxa de Crescimento (%)",       # R√≥tulo do eixo Y
        height=400,                                  # Altura padr√£o do gr√°fico
        plot_bgcolor='rgba(0,0,0,0)',               # Fundo transparente
        paper_bgcolor='rgba(0,0,0,0)',              # Papel transparente
        font=dict(family="Arial", size=12)           # Fonte padr√£o
    )
    
    # Formata√ß√£o da grade para melhor legibilidade
    fig4.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
    fig4.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
    
    # Linha de refer√™ncia horizontal em 0% (marco de crescimento neutro)
    # Indicador visual para separar crescimento positivo e negativo
    fig4.add_hline(y=0, line_dash="dash", line_color="gray", annotation_text="0%")
    
    # Renderiza√ß√£o do gr√°fico de crescimento
    st.plotly_chart(fig4, use_container_width=True)
    
    # Informa√ß√£o sobre fonte dos dados (transpar√™ncia e credibilidade)
    st.markdown('<div class="fonte-dados">Fonte de Dados: Portal da Transpar√™ncia</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # ============= RODAP√â DA P√ÅGINA =============
    # Exibi√ß√£o do rodap√© institucional padronizado
    # Componente final da interface para informa√ß√µes complementares
    display_footer()

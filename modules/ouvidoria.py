"""
============================================================================
                        M√ìDULO OUVIDORIA - DASHBOARD IFPB-CZ
============================================================================

Este m√≥dulo implementa an√°lises completas sobre dados da Ouvidoria do 
Instituto Federal da Para√≠ba - Campus Cajazeiras (IFPB-CZ), apresentando 
m√©tricas detalhadas sobre manifesta√ß√µes, tipos de usu√°rios, tempo de 
atendimento e distribui√ß√£o por unidades.

FUNCIONALIDADES PRINCIPAIS:
- Dashboard interativo com KPIs consolidados da ouvidoria
- An√°lises temporais de manifesta√ß√µes com periodicidade configur√°vel
- Distribui√ß√£o de manifesta√ß√µes por unidades organizacionais
- Classifica√ß√£o por tipos de manifesta√ß√£o (reclama√ß√£o, sugest√£o, etc.)
- An√°lise de perfil de usu√°rios e tempo de resposta
- Monitoramento da qualidade do atendimento institucional

ESTRUTURA DOS DADOS:
- Dados sint√©ticos gerados pelo DataGenerator
- Campos: ano, mes, unidade, tipo_manifestacao, tipo_usuario, quantidade, dias_atendimento
- Agrega√ß√µes por m√∫ltiplos n√≠veis: temporal, organizacional, tipol√≥gico
- C√°lculo autom√°tico de m√©dias e percentuais

DEPEND√äNCIAS:
- streamlit: Interface web interativa e responsiva
- pandas: Manipula√ß√£o e an√°lise de dados estruturados
- plotly.express/graph_objects: Visualiza√ß√µes gr√°ficas interativas
- utils: Fun√ß√µes auxiliares (cabe√ßalho, rodap√©, formata√ß√£o)

PADR√ÉO VISUAL:
- Cores institucionais IFPB: #1a8c73 (principal), #0d5a4e, #2db896
- Paleta qualitativa para gr√°ficos de pizza (Set3)
- Layout responsivo com containers CSS personalizados
- Gr√°ficos interativos com filtros temporais e organizacionais

============================================================================
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from .utils import display_header_with_logo, display_footer

def ouvidoria_module(data_gen):
    """
    M√≥dulo principal de an√°lise dos dados da Ouvidoria IFPB-CZ.
    
    Processa e apresenta dados da ouvidoria atrav√©s de dashboards interativos,
    incluindo KPIs de atendimento, an√°lises temporais, distribui√ß√µes por 
    unidade e tipo, e m√©tricas de qualidade do servi√ßo de ouvidoria.
    
    SE√á√ïES IMPLEMENTADAS:
    1. KPIs Consolidados - Total, usu√°rio frequente e tempo m√©dio
    2. Evolu√ß√£o Temporal - An√°lise mensal/semestral de manifesta√ß√µes
    3. Distribui√ß√£o por Unidade - An√°lise organizacional
    4. Tipos de Manifesta√ß√£o - Classifica√ß√£o das demandas
    5. Perfil de Usu√°rios - An√°lise do p√∫blico atendido
    6. Tempo de Atendimento - Monitoramento da qualidade do servi√ßo
    
    Args:
        data_gen (DataGenerator): Inst√¢ncia para gera√ß√£o de dados sint√©ticos
                                 da ouvidoria com estrutura padronizada
    
    Returns:
        None: Renderiza interface Streamlit com visualiza√ß√µes interativas
    """
    
    # ============= INICIALIZA√á√ÉO: CABE√áALHO E DADOS =============
    # Exibir cabe√ßalho institucional com logo IFPB
    display_header_with_logo("Ouvidoria")
    
    # Gerar dados sint√©ticos da ouvidoria usando DataGenerator
    dados_ouvidoria = data_gen.gerar_dados_ouvidoria()
    
    # ============= PROCESSAMENTO: C√ÅLCULO DE KPIs ANUAIS =============
    # Filtrar dados para o ano atual (2025) para m√©tricas consolidadas
    dados_2025 = dados_ouvidoria[dados_ouvidoria['ano'] == 2025]
    
    # Calcular indicadores-chave (KPIs) da ouvidoria para o ano atual
    total_manifestacoes = dados_2025['quantidade'].sum()        # Total de manifesta√ß√µes recebidas
    
    # Identificar usu√°rio mais frequente (perfil predominante)
    usuario_mais_frequente = dados_2025.groupby('tipo_usuario')['quantidade'].sum().idxmax()
    
    # Calcular m√©dia de dias para atendimento (indicador de efici√™ncia)
    media_dias_atendimento = dados_2025['dias_atendimento'].mean()
    
    # ============= SE√á√ÉO 1: DISPLAY DE KPIs DA OUVIDORIA =============
    # Apresentar indicadores principais em formato de cart√µes visuais
    # Layout em 3 colunas para exibi√ß√£o dos KPIs consolidados
    col1, col2, col3 = st.columns(3)
    
    # KPI 1: Total de Manifesta√ß√µes (indicador de volume de demandas)
    with col1:
        st.markdown(f"""
        <div class="kpi-container">
            <div class="kpi-title">TOTAL DE MANIFESTA√á√ïES</div>
            <div class="kpi-value">{total_manifestacoes:,}</div>
        </div>
        """, unsafe_allow_html=True)
    
    # KPI 2: Usu√°rio Mais Frequente (perfil predominante)
    with col2:
        st.markdown(f"""
        <div class="kpi-container">
            <div class="kpi-title">USU√ÅRIO MAIS FREQUENTE</div>
            <div class="kpi-value">{usuario_mais_frequente}</div>
        </div>
        """, unsafe_allow_html=True)
    
    # KPI 3: M√©dia de Dias de Atendimento (indicador de efici√™ncia)
    with col3:
        st.markdown(f"""
        <div class="kpi-container">
            <div class="kpi-title">M√âDIA DE DIAS DE ATENDIMENTO</div>
            <div class="kpi-value">{media_dias_atendimento:.1f}</div>
        </div>
        """, unsafe_allow_html=True)
    
    # Separador visual entre se√ß√µes principais
    st.markdown("---")
    
    # ============= SE√á√ÉO 2: EVOLU√á√ÉO TEMPORAL DAS MANIFESTA√á√ïES =============
    # An√°lise longitudinal das manifesta√ß√µes ao longo do tempo
    # Permite identificar tend√™ncias, sazonalidades e padr√µes temporais
    
    # Subsse√ß√£o A: Gr√°fico de evolu√ß√£o temporal com filtros din√¢micos
    # Container com t√≠tulo estilizado para organiza√ß√£o visual
    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
    st.subheader("üìà Evolu√ß√£o Mensal de Manifesta√ß√µes")
    
    # Layout de filtros em duas colunas para melhor UX
    col1, col2 = st.columns(2)
    
    # Filtro 1: Sele√ß√£o do ano de an√°lise
    # Ordenado de forma decrescente para priorizar dados recentes
    with col1:
        ano_evolucao = st.selectbox(
            "Ano:",
            sorted(dados_ouvidoria['ano'].unique(), reverse=True),
            key="ano_evolucao_ouv"
        )
    
    # Filtro 2: Per√≠odo de agrupamento temporal
    # Op√ß√µes entre visualiza√ß√£o mensal e semestral
    with col2:
        periodo_evolucao = st.selectbox(
            "Per√≠odo:",
            ["Mensal", "Semestral"],
            key="periodo_evolucao"
        )
    
    # Aplicar filtro temporal nos dados
    # Subset dos dados baseado no ano selecionado
    dados_evolucao = dados_ouvidoria[dados_ouvidoria['ano'] == ano_evolucao]
    
    # Processamento condicional baseado no per√≠odo selecionado
    if periodo_evolucao == "Mensal":
        # Agrupamento mensal: soma de manifesta√ß√µes por m√™s
        dados_evolucao_grafico = dados_evolucao.groupby('mes')['quantidade'].sum().reset_index()
        
        # Mapeamento de n√∫meros para nomes dos meses (melhor legibilidade)
        meses_nomes = {
            1: 'Jan', 2: 'Fev', 3: 'Mar', 4: 'Abr', 5: 'Mai', 6: 'Jun',
            7: 'Jul', 8: 'Ago', 9: 'Set', 10: 'Out', 11: 'Nov', 12: 'Dez'
        }
        
        # Aplicar mapeamento para exibi√ß√£o amig√°vel
        dados_evolucao_grafico['mes_nome'] = dados_evolucao_grafico['mes'].map(meses_nomes)
        
        # Cria√ß√£o do gr√°fico de linha temporal mensal
        # Visualiza√ß√£o com marcadores para melhor identifica√ß√£o dos pontos
        fig = px.line(
            dados_evolucao_grafico,
            x='mes_nome',  # Eixo X com nomes dos meses
            y='quantidade',  # Eixo Y com quantidade de manifesta√ß√µes
            title=f"Evolu√ß√£o Mensal de Manifesta√ß√µes - {ano_evolucao}",
            markers=True,  # Habilitar marcadores nos pontos
            color_discrete_sequence=['#1a8c73']  # Cor institucional IFPB
        )
        
        # Customiza√ß√£o do layout do gr√°fico mensal
        fig.update_layout(
            xaxis_title="M√™s",
            yaxis_title="Quantidade de Manifesta√ß√µes",
            height=400,  # Altura padr√£o do gr√°fico
            plot_bgcolor='rgba(0,0,0,0)',  # Fundo transparente
            paper_bgcolor='rgba(0,0,0,0)'
        )
        
        # Formata√ß√£o da grade para melhor legibilidade
        fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
        fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
        
    else:  # Visualiza√ß√£o Semestral
        # Processamento para agrupamento semestral
        # Classifica√ß√£o dos meses em semestres (1¬∫: Jan-Jun, 2¬∫: Jul-Dez)
        dados_evolucao['semestre'] = dados_evolucao['mes'].apply(lambda x: 1 if x <= 6 else 2)
        
        # Agrupamento semestral: soma de manifesta√ß√µes por semestre
        dados_evolucao_grafico = dados_evolucao.groupby('semestre')['quantidade'].sum().reset_index()
        
        # Formata√ß√£o amig√°vel dos r√≥tulos semestrais
        dados_evolucao_grafico['semestre_nome'] = dados_evolucao_grafico['semestre'].apply(lambda x: f"{x}¬∫ Semestre")
        
        # Cria√ß√£o do gr√°fico de barras para visualiza√ß√£o semestral
        # Gr√°fico de barras mais adequado para compara√ß√£o de per√≠odos discretos
        fig = px.bar(
            dados_evolucao_grafico,
            x='semestre_nome',  # Eixo X com r√≥tulos semestrais
            y='quantidade',  # Eixo Y com quantidade de manifesta√ß√µes
            title=f"Manifesta√ß√µes por Semestre - {ano_evolucao}",
            color_discrete_sequence=['#1a8c73']  # Cor institucional IFPB
        )
        
        # Customiza√ß√£o do layout do gr√°fico semestral
        fig.update_layout(
            xaxis_title="Semestre",
            yaxis_title="Quantidade de Manifesta√ß√µes",
            height=400,  # Altura padr√£o do gr√°fico
            plot_bgcolor='rgba(0,0,0,0)',  # Fundo transparente
            paper_bgcolor='rgba(0,0,0,0)'
        )
        
        # Formata√ß√£o da grade para melhor legibilidade
        fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
        fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
    
    # Renderiza√ß√£o do gr√°fico no Streamlit
    st.plotly_chart(fig, use_container_width=True)
    
    # Informa√ß√£o sobre fonte dos dados (transpar√™ncia e credibilidade)
    st.markdown('<div class="fonte-dados">Fonte de Dados: Ouvidoria IFPB</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # ============= SE√á√ÉO 3: DISTRIBUI√á√ÉO DE MANIFESTA√á√ïES POR UNIDADE =============
    # An√°lise espacial das manifesta√ß√µes entre diferentes unidades organizacionais
    # Permite identificar unidades com maior demanda e necessidades espec√≠ficas
    
    # Subsse√ß√£o A: Container para an√°lise por unidade administrativa
    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
    st.subheader("üìä Manifesta√ß√µes por Unidade")
    
    # Layout de filtros em duas colunas para sele√ß√£o de par√¢metros
    col1, col2 = st.columns(2)
    
    # Filtro 1: Sele√ß√£o do ano para an√°lise por unidade
    # Prioriza√ß√£o de dados recentes com ordena√ß√£o decrescente
    with col1:
        ano_unidade = st.selectbox(
            "Ano:",
            sorted(dados_ouvidoria['ano'].unique(), reverse=True),
            key="ano_unidade_ouv"
        )
    
    # Filtro 2: Forma de exibi√ß√£o dos dados (absoluto vs relativo)
    # Op√ß√£o entre valores absolutos e percentuais para diferentes perspectivas
    with col2:
        forma_exibicao = st.selectbox(
            "Forma de exibi√ß√£o:",
            ["Quantidade", "Percentual"],
            key="forma_exibicao_ouv"
        )
    
    # Aplicar filtro temporal e processar dados por unidade
    # Subset dos dados baseado no ano selecionado
    dados_unidade = dados_ouvidoria[dados_ouvidoria['ano'] == ano_unidade]
    
    # Agrupamento por unidade: soma de manifesta√ß√µes por unidade administrativa
    dados_unidade_grafico = dados_unidade.groupby('unidade')['quantidade'].sum().reset_index()
    
    # Processamento condicional baseado na forma de exibi√ß√£o
    if forma_exibicao == "Percentual":
        # C√°lculo do percentual relativo ao total do ano
        total_manifestacoes_ano = dados_unidade_grafico['quantidade'].sum()
        dados_unidade_grafico['percentual'] = (dados_unidade_grafico['quantidade'] / total_manifestacoes_ano) * 100
        
        # Cria√ß√£o do gr√°fico de barras com percentuais
        # Visualiza√ß√£o relativa para compara√ß√£o proporcional
        fig2 = px.bar(
            dados_unidade_grafico,
            x='unidade',  # Eixo X com nomes das unidades
            y='percentual',  # Eixo Y com percentuais
            title=f"Manifesta√ß√µes por Unidade (%) - {ano_unidade}",
            color_discrete_sequence=['#1a8c73']  # Cor institucional IFPB
        )
        
        # Customiza√ß√£o do layout para exibi√ß√£o percentual
        fig2.update_layout(
            xaxis_title="Unidade",
            yaxis_title="Percentual (%)",
            xaxis_tickangle=-45,  # Rota√ß√£o dos r√≥tulos para melhor legibilidade
            height=400,  # Altura padr√£o do gr√°fico
            plot_bgcolor='rgba(0,0,0,0)',  # Fundo transparente
            paper_bgcolor='rgba(0,0,0,0)'
        )
        
        # Formata√ß√£o da grade para melhor legibilidade
        fig2.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
        fig2.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
        
    else:  # Exibi√ß√£o por Quantidade Absoluta
        # Cria√ß√£o do gr√°fico de barras com valores absolutos
        # Visualiza√ß√£o direta das quantidades por unidade
        fig2 = px.bar(
            dados_unidade_grafico,
            x='unidade',  # Eixo X com nomes das unidades
            y='quantidade',  # Eixo Y com quantidades absolutas
            title=f"Manifesta√ß√µes por Unidade - {ano_unidade}",
            color_discrete_sequence=['#1a8c73']  # Cor institucional IFPB
        )
        
        # Customiza√ß√£o do layout para exibi√ß√£o de quantidade
        fig2.update_layout(
            xaxis_title="Unidade",
            yaxis_title="Quantidade",
            xaxis_tickangle=-45,  # Rota√ß√£o dos r√≥tulos para melhor legibilidade
            height=400,  # Altura padr√£o do gr√°fico
            plot_bgcolor='rgba(0,0,0,0)',  # Fundo transparente
            paper_bgcolor='rgba(0,0,0,0)'
        )
        
        # Formata√ß√£o da grade para melhor legibilidade
        fig2.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
        fig2.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
    
    # Renderiza√ß√£o do gr√°fico de unidades no Streamlit
    st.plotly_chart(fig2, use_container_width=True)
    
    # Informa√ß√£o sobre fonte dos dados (transpar√™ncia e credibilidade)
    st.markdown('<div class="fonte-dados">Fonte de Dados: Ouvidoria IFPB</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # ============= SE√á√ÉO 4: AN√ÅLISE DE TIPOS DE MANIFESTA√á√ÉO =============
    # Classifica√ß√£o das manifesta√ß√µes por natureza e categoria
    # Permite compreender a distribui√ß√£o das demandas por tipo de solicita√ß√£o
    
    # Subsse√ß√£o A: Container para an√°lise tipol√≥gica das manifesta√ß√µes
    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
    st.subheader("üìä Tipos de Manifesta√ß√£o")
    
    # Layout de filtros em duas colunas para sele√ß√£o de par√¢metros
    col1, col2 = st.columns(2)
    
    # Filtro 1: Sele√ß√£o do ano para an√°lise tipol√≥gica
    # Ordena√ß√£o decrescente para priorizar dados recentes
    with col1:
        ano_tipo = st.selectbox(
            "Ano:",
            sorted(dados_ouvidoria['ano'].unique(), reverse=True),
            key="ano_tipo_ouv"
        )
    
    # Filtro 2: Sele√ß√£o da unidade para an√°lise espec√≠fica ou geral
    # Op√ß√£o "Todas" para vis√£o institucional consolidada
    with col2:
        unidade_tipo = st.selectbox(
            "Unidade:",
            ["Todas"] + list(dados_ouvidoria['unidade'].unique()),
            key="unidade_tipo_ouv"
        )
    
    # Aplicar filtros temporais e espaciais nos dados
    # Subset inicial baseado no ano selecionado
    dados_tipo = dados_ouvidoria[dados_ouvidoria['ano'] == ano_tipo]
    
    # Aplicar filtro de unidade se especificado
    # Refinamento adicional por unidade administrativa
    if unidade_tipo != "Todas":
        dados_tipo = dados_tipo[dados_tipo['unidade'] == unidade_tipo]
    
    # Agrupamento por tipo de manifesta√ß√£o: soma por categoria
    dados_tipo_grafico = dados_tipo.groupby('tipo_manifestacao')['quantidade'].sum().reset_index()
    
    # Cria√ß√£o do gr√°fico de pizza para visualiza√ß√£o proporcional
    # Gr√°fico circular ideal para mostrar distribui√ß√£o de categorias
    fig3 = px.pie(
        dados_tipo_grafico,
        values='quantidade',  # Valores para c√°lculo das fatias
        names='tipo_manifestacao',  # R√≥tulos das categorias
        title=f"Tipos de Manifesta√ß√£o - {ano_tipo}" + (f" - {unidade_tipo}" if unidade_tipo != "Todas" else ""),
        color_discrete_sequence=px.colors.qualitative.Set3  # Paleta de cores diversificada
    )
    
    # Customiza√ß√£o das informa√ß√µes exibidas no gr√°fico
    # Exibir percentual e r√≥tulo dentro das fatias
    fig3.update_traces(
        textposition='inside',  # Posicionamento interno do texto
        textinfo='percent+label',  # Informa√ß√µes a serem exibidas
        textfont_size=11  # Tamanho da fonte para legibilidade
    )
    
    # Customiza√ß√£o do layout do gr√°fico de pizza
    fig3.update_layout(
        height=400,  # Altura padr√£o do gr√°fico
        font=dict(family="Arial", size=12)  # Fonte padr√£o para consist√™ncia
    )
    
    # Renderiza√ß√£o do gr√°fico de tipos de manifesta√ß√£o
    st.plotly_chart(fig3, use_container_width=True)
    
    # Informa√ß√£o sobre fonte dos dados (transpar√™ncia e credibilidade)
    st.markdown('<div class="fonte-dados">Fonte de Dados: Ouvidoria IFPB</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # ============= SE√á√ÉO 5: AN√ÅLISE DE PERFIL DE USU√ÅRIOS =============
    # Caracteriza√ß√£o dos usu√°rios que procuram os servi√ßos de ouvidoria
    # Permite compreender o p√∫blico-alvo e suas demandas espec√≠ficas
    
    # Subsse√ß√£o A: Container para an√°lise do perfil de usu√°rios
    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
    st.subheader("üìä Tipos de Usu√°rio")
    
    # Filtro √∫nico para sele√ß√£o do ano de an√°lise
    # Sele√ß√£o temporal para an√°lise de perfil de usu√°rios
    ano_usuario = st.selectbox(
        "Ano:",
        sorted(dados_ouvidoria['ano'].unique(), reverse=True),
        key="ano_usuario_ouv"
    )
    
    # Aplicar filtro temporal nos dados
    # Subset dos dados baseado no ano selecionado
    dados_usuario = dados_ouvidoria[dados_ouvidoria['ano'] == ano_usuario]
    
    # Agrupamento por tipo de usu√°rio: soma por perfil
    dados_usuario_grafico = dados_usuario.groupby('tipo_usuario')['quantidade'].sum().reset_index()
    
    # Cria√ß√£o do gr√°fico de barras para perfil de usu√°rios
    # Visualiza√ß√£o comparativa dos diferentes tipos de usu√°rios
    fig4 = px.bar(
        dados_usuario_grafico,
        x='tipo_usuario',  # Eixo X com tipos de usu√°rios
        y='quantidade',  # Eixo Y com quantidades
        title=f"Manifesta√ß√µes por Tipo de Usu√°rio - {ano_usuario}",
        color_discrete_sequence=['#1a8c73']  # Cor institucional IFPB
    )
    
    # Customiza√ß√£o do layout do gr√°fico de usu√°rios
    fig4.update_layout(
        xaxis_title="Tipo de Usu√°rio",
        yaxis_title="Quantidade",
        height=400,  # Altura padr√£o do gr√°fico
        xaxis_tickangle=-45,  # Rota√ß√£o dos r√≥tulos se necess√°rio
        plot_bgcolor='rgba(0,0,0,0)',  # Fundo transparente
        paper_bgcolor='rgba(0,0,0,0)'
    )
    
    # Formata√ß√£o da grade para melhor legibilidade
    fig4.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
    fig4.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
    
    # Renderiza√ß√£o do gr√°fico de tipos de usu√°rio
    st.plotly_chart(fig4, use_container_width=True)
    
    # Informa√ß√£o sobre fonte dos dados (transpar√™ncia e credibilidade)
    st.markdown('<div class="fonte-dados">Fonte de Dados: Ouvidoria IFPB</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # ============= SE√á√ÉO 6: AN√ÅLISE DE TEMPO DE ATENDIMENTO =============
    # Avalia√ß√£o da efici√™ncia temporal no processamento das manifesta√ß√µes
    # Permite monitorar qualidade do servi√ßo e identificar gargalos operacionais
    
    # Subsse√ß√£o A: Container para an√°lise de tempo de resposta
    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
    st.subheader("‚è±Ô∏è Tempo de Atendimento")
    
    # Layout de filtros em duas colunas para an√°lise temporal
    col1, col2 = st.columns(2)
    
    # Filtro 1: Sele√ß√£o do ano para an√°lise de tempo de atendimento
    # Ordena√ß√£o decrescente para priorizar dados recentes
    with col1:
        ano_tempo = st.selectbox(
            "Ano:",
            sorted(dados_ouvidoria['ano'].unique(), reverse=True),
            key="ano_tempo_ouv"
        )
    
    # Filtro 2: Sele√ß√£o da unidade para an√°lise espec√≠fica ou geral
    # Op√ß√£o "Todas" para vis√£o institucional consolidada
    with col2:
        unidade_tempo = st.selectbox(
            "Unidade:",
            ["Todas"] + list(dados_ouvidoria['unidade'].unique()),
            key="unidade_tempo_ouv"
        )
    
    # Aplicar filtros temporais e espaciais nos dados
    # Subset inicial baseado no ano selecionado
    dados_tempo = dados_ouvidoria[dados_ouvidoria['ano'] == ano_tempo]
    
    # Aplicar filtro de unidade se especificado
    # Refinamento adicional por unidade administrativa
    if unidade_tempo != "Todas":
        dados_tempo = dados_tempo[dados_tempo['unidade'] == unidade_tempo]
    
    # Calcular tempo m√©dio de atendimento por m√™s
    # Agrupamento temporal com c√°lculo da m√©dia de dias para atendimento
    dados_tempo_grafico = dados_tempo.groupby('mes')['dias_atendimento'].mean().reset_index()
    
    # Mapeamento de n√∫meros para nomes dos meses (melhor legibilidade)
    meses_nomes = {
        1: 'Jan', 2: 'Fev', 3: 'Mar', 4: 'Abr', 5: 'Mai', 6: 'Jun',
        7: 'Jul', 8: 'Ago', 9: 'Set', 10: 'Out', 11: 'Nov', 12: 'Dez'
    }
    
    # Aplicar mapeamento para exibi√ß√£o amig√°vel
    dados_tempo_grafico['mes_nome'] = dados_tempo_grafico['mes'].map(meses_nomes)
    
    # Cria√ß√£o do gr√°fico de linha para evolu√ß√£o temporal do atendimento
    # Visualiza√ß√£o da efici√™ncia temporal ao longo dos meses
    fig5 = px.line(
        dados_tempo_grafico,
        x='mes_nome',  # Eixo X com nomes dos meses
        y='dias_atendimento',  # Eixo Y com tempo m√©dio em dias
        title=f"Tempo M√©dio de Atendimento por M√™s - {ano_tempo}" + (f" - {unidade_tempo}" if unidade_tempo != "Todas" else ""),
        markers=True,  # Habilitar marcadores nos pontos
        color_discrete_sequence=['#1a8c73']  # Cor institucional IFPB
    )
    
    # Customiza√ß√£o do layout do gr√°fico de tempo de atendimento
    # Customiza√ß√£o do layout do gr√°fico de tempo de atendimento
    fig5.update_layout(
        xaxis_title="M√™s",
        yaxis_title="Dias de Atendimento",
        height=400,  # Altura padr√£o do gr√°fico
        plot_bgcolor='rgba(0,0,0,0)',  # Fundo transparente
        paper_bgcolor='rgba(0,0,0,0)'
    )
    
    # Formata√ß√£o da grade para melhor legibilidade
    fig5.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
    fig5.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
    
    # Renderiza√ß√£o do gr√°fico de tempo de atendimento
    st.plotly_chart(fig5, use_container_width=True)
    
    # Informa√ß√£o sobre fonte dos dados (transpar√™ncia e credibilidade)
    st.markdown('<div class="fonte-dados">Fonte de Dados: Ouvidoria IFPB</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # ============= RODAP√â DA P√ÅGINA =============
    # Exibi√ß√£o do rodap√© institucional padronizado
    # Componente final da interface para informa√ß√µes complementares
    display_footer()

#!/usr/bin/env python3
"""
Teste das configura√ß√µes de seguran√ßa do sistema

Este script testa se as configura√ß√µes de seguran√ßa est√£o funcionando corretamente.
"""

import os
import sys
import pandas as pd
from datetime import datetime

# Adicionar o m√≥dulo ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'modules'))

def testar_configuracoes_seguranca():
    """Testa as configura√ß√µes de seguran√ßa"""
    
    print("üîí TESTE DE CONFIGURA√á√ïES DE SEGURAN√áA")
    print("=" * 50)
    
    # Importar configura√ß√µes
    try:
        from config import (
            PERMITIR_CRIACAO_PLANILHAS,
            SOBRESCREVER_ARQUIVOS_EXISTENTES,
            MODO_SOMENTE_LEITURA,
            MOSTRAR_LOGS
        )
        
        print("‚úÖ Configura√ß√µes carregadas com sucesso:")
        print(f"   - PERMITIR_CRIACAO_PLANILHAS = {PERMITIR_CRIACAO_PLANILHAS}")
        print(f"   - SOBRESCREVER_ARQUIVOS_EXISTENTES = {SOBRESCREVER_ARQUIVOS_EXISTENTES}")
        print(f"   - MODO_SOMENTE_LEITURA = {MODO_SOMENTE_LEITURA}")
        print(f"   - MOSTRAR_LOGS = {MOSTRAR_LOGS}")
        
    except ImportError as e:
        print(f"‚ùå Erro ao carregar configura√ß√µes: {e}")
        return False
    
    print("\nüìä TESTE DE FUNCIONALIDADE:")
    print("-" * 30)
    
    # Testar DataGenerator
    try:
        from modules.data_generator import DataGenerator
        
        # Criar inst√¢ncia do gerador
        data_gen = DataGenerator()
        
        # Criar dados de teste
        dados_teste = pd.DataFrame({
            'ano': [2024, 2025],
            'campo_teste': ['teste1', 'teste2'],
            'valor': [100, 200]
        })
        
        # Testar salvamento
        print("üß™ Testando salvamento de dados de teste...")
        resultado = data_gen._salvar_dados_excel(dados_teste, "teste_seguranca")
        
        if resultado is None:
            print("‚úÖ Salvamento bloqueado corretamente pelas configura√ß√µes de seguran√ßa")
        else:
            print(f"‚ö†Ô∏è  Arquivo salvo em: {resultado}")
            print("   (Configura√ß√µes de seguran√ßa podem estar desabilitadas)")
        
        # Testar carregamento
        print("\nüß™ Testando carregamento de dados existentes...")
        dados_carregados = data_gen._carregar_dados_excel("teste_seguranca")
        
        if dados_carregados is not None:
            print(f"‚úÖ Dados carregados com sucesso: {len(dados_carregados)} registros")
        else:
            print("‚ÑπÔ∏è  Nenhum dado carregado (arquivo pode n√£o existir)")
        
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")
        return False
    
    print("\nüéØ RESUMO DOS TESTES:")
    print("-" * 20)
    
    # Verificar configura√ß√£o recomendada para produ√ß√£o
    if MODO_SOMENTE_LEITURA and not PERMITIR_CRIACAO_PLANILHAS and not SOBRESCREVER_ARQUIVOS_EXISTENTES:
        print("‚úÖ Sistema configurado para PRODU√á√ÉO (modo seguro)")
        print("   - Dados protegidos contra altera√ß√µes acidentais")
        print("   - Cria√ß√£o de planilhas bloqueada")
        print("   - Sobrescrita de arquivos bloqueada")
    else:
        print("‚ö†Ô∏è  Sistema configurado para DESENVOLVIMENTO")
        print("   - Edi√ß√£o de dados permitida")
        print("   - Use apenas em ambiente de desenvolvimento")
    
    return True

def verificar_arquivos_dados():
    """Verifica se os arquivos de dados existem"""
    
    print("\nüìÅ VERIFICA√á√ÉO DE ARQUIVOS DE DADOS:")
    print("-" * 35)
    
    pasta_dados = "dados"
    arquivos_esperados = [
        "dados_ensino.xlsx",
        "dados_assistencia.xlsx",
        "dados_pesquisa.xlsx",
        "dados_extensao.xlsx",
        "dados_orcamento.xlsx",
        "dados_servidores.xlsx",
        "dados_ouvidoria.xlsx",
        "dados_auditoria.xlsx",
        "dados_mundo_trabalho.xlsx"
    ]
    
    if not os.path.exists(pasta_dados):
        print(f"‚ùå Pasta '{pasta_dados}' n√£o encontrada")
        return False
    
    arquivos_encontrados = 0
    for arquivo in arquivos_esperados:
        caminho = os.path.join(pasta_dados, arquivo)
        if os.path.exists(caminho):
            print(f"‚úÖ {arquivo}")
            arquivos_encontrados += 1
        else:
            print(f"‚ùå {arquivo} - n√£o encontrado")
    
    print(f"\nüìä Resultado: {arquivos_encontrados}/{len(arquivos_esperados)} arquivos encontrados")
    
    if arquivos_encontrados == len(arquivos_esperados):
        print("‚úÖ Todos os arquivos de dados est√£o presentes")
    else:
        print("‚ö†Ô∏è  Alguns arquivos de dados est√£o ausentes")
        print("   O sistema usar√° dados sint√©ticos para m√≥dulos sem arquivos")
    
    return True

def main():
    """Fun√ß√£o principal"""
    print(f"üîß Teste de Seguran√ßa - {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print("")
    
    # Executar testes
    if testar_configuracoes_seguranca():
        verificar_arquivos_dados()
        
        print("\nüéâ TESTE CONCLU√çDO!")
        print("=" * 20)
        print("‚úÖ Configura√ß√µes de seguran√ßa testadas com sucesso")
        print("üìù Verifique os logs acima para detalhes espec√≠ficos")
        
    else:
        print("\n‚ùå TESTE FALHOU!")
        print("=" * 15)
        print("‚ùå Problemas encontrados nas configura√ß√µes de seguran√ßa")
        print("üìù Verifique os erros acima para mais detalhes")

if __name__ == "__main__":
    main()

#!/usr/bin/env python3
"""
=============================================================================
SCRIPT DE TESTE DE DADOS - SISTEMA DASHBOARD IFPB-CZ
=============================================================================

Este script implementa sistema de teste abrangente para valida√ß√£o da altern√¢ncia
entre dados sint√©ticos e dados reais no Sistema Dashboard IFPB-CZ, permitindo
verifica√ß√£o de funcionalidade, diagn√≥stico de problemas e valida√ß√£o de
configura√ß√µes antes da opera√ß√£o em produ√ß√£o.

FUNCIONALIDADES PRINCIPAIS:
---------------------------
- Teste de carregamento de dados sint√©ticos (gerados automaticamente)
- Teste de carregamento de dados reais (arquivos Excel institucionais)
- Valida√ß√£o de configura√ß√µes do sistema (config.py)
- Diagn√≥stico de problemas e sugest√µes de corre√ß√£o
- Instru√ß√µes detalhadas para migra√ß√£o para dados reais
- Verifica√ß√£o de integridade estrutural dos dados

TIPOS DE TESTE IMPLEMENTADOS:
-----------------------------
1. Teste de Dados Sint√©ticos:
   - Valida√ß√£o do gerador autom√°tico de dados
   - Verifica√ß√£o de estrutura e consist√™ncia
   - An√°lise de cobertura temporal e conte√∫do

2. Teste de Dados Reais:
   - Carregamento de arquivos Excel institucionais
   - Valida√ß√£o de estrutura e colunas obrigat√≥rias
   - Verifica√ß√£o de integridade e consist√™ncia

3. Diagn√≥stico de Configura√ß√£o:
   - Exibi√ß√£o de par√¢metros ativos do sistema
   - Valida√ß√£o de flags de controle
   - Orienta√ß√µes para ajustes necess√°rios

CEN√ÅRIOS DE TESTE COBERTOS:
---------------------------
- Sistema novo sem dados reais (modo sint√©tico)
- Sistema com dados reais dispon√≠veis (modo real)
- Sistema com problemas de carregamento (diagn√≥stico)
- Migra√ß√£o de dados sint√©ticos para reais (transi√ß√£o)
- Valida√ß√£o de estrutura de arquivos (conformidade)

ESTRUTURA DE VALIDA√á√ÉO:
-----------------------
- Verifica√ß√£o de exist√™ncia de arquivos obrigat√≥rios
- Valida√ß√£o de estrutura de colunas por m√≥dulo
- Teste de carregamento e processamento de dados
- An√°lise de cobertura temporal e completude
- Diagn√≥stico de erros com sugest√µes espec√≠ficas

CONFIGURA√á√ïES TESTADAS:
-----------------------
- USE_REAL_DATA: controle do tipo de dados utilizado
- VALIDAR_DADOS: ativa√ß√£o de valida√ß√µes adicionais
- MOSTRAR_LOGS: controle de verbosidade do sistema
- USAR_DADOS_BACKUP: utiliza√ß√£o de dados de fallback

INSTRU√á√ïES FORNECIDAS:
----------------------
- Passo-a-passo para migra√ß√£o para dados reais
- Lista completa de arquivos Excel necess√°rios
- Orienta√ß√µes de estrutura e formata√ß√£o
- Procedimentos de verifica√ß√£o e valida√ß√£o
- Dicas de troubleshooting para problemas comuns

OBJETIVO:
---------
Facilitar teste, valida√ß√£o e migra√ß√£o do sistema entre modos de opera√ß√£o,
garantindo funcionamento correto antes da implanta√ß√£o em produ√ß√£o e
fornecendo ferramentas de diagn√≥stico para resolu√ß√£o de problemas.

DEPEND√äNCIAS:
-------------
- sys, os: manipula√ß√£o de sistema e caminhos
- config: configura√ß√µes do sistema
- modules.data_generator: gerador de dados sint√©ticos
- modules.data_generator_real: carregador de dados reais

AUTOR: Sistema NAI/IFPB-CZ
DATA: 2024
=============================================================================
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import config
from modules.data_generator import DataGenerator
from modules.data_generator_real import DataGeneratorReal

def test_dados_sinteticos():
    """
    Teste abrangente de funcionamento do gerador de dados sint√©ticos.
    
    Valida capacidade do sistema de gerar dados automaticamente quando
    dados reais n√£o est√£o dispon√≠veis, verificando estrutura, consist√™ncia
    e cobertura temporal dos dados gerados para demonstra√ß√£o.
    
    VALIDA√á√ïES REALIZADAS:
    - Instancia√ß√£o correta do gerador sint√©tico
    - Gera√ß√£o bem-sucedida de dados de extens√£o (m√≥dulo de teste)
    - Verifica√ß√£o de estrutura de colunas geradas
    - An√°lise de cobertura temporal dos dados
    - Contagem de registros gerados
    
    DADOS TESTADOS:
    - M√≥dulo de extens√£o como representativo do sistema
    - Estrutura de colunas conforme especifica√ß√£o
    - Cobertura temporal adequada para an√°lises
    - Consist√™ncia de tipos de dados gerados
    
    DIAGN√ìSTICO INCLU√çDO:
    - Informa√ß√µes sobre quantidade de registros
    - Lista de colunas dispon√≠veis
    - Faixa temporal coberta pelos dados
    - Identifica√ß√£o de problemas de gera√ß√£o
    
    RETORNO:
    --------
    None
        Fun√ß√£o de teste com sa√≠da via logging console
        
    EXCE√á√ïES TRATADAS:
    ------------------
    Exception
        Qualquer erro durante gera√ß√£o √© capturado e reportado
        com orienta√ß√µes para resolu√ß√£o
    """
    # ============= IN√çCIO DO TESTE DE DADOS SINT√âTICOS =============
    # Cabe√ßalho visual para identifica√ß√£o clara da se√ß√£o de teste
    print("="*50)
    print("üîß TESTANDO DADOS SINT√âTICOS")
    print("="*50)
    
    # ============= TESTE DE GERA√á√ÉO COM TRATAMENTO DE ERROS =============
    try:
        # Instancia gerador de dados sint√©ticos com configura√ß√µes padr√£o
        data_gen = DataGenerator()
        
        # Gera dados de extens√£o como amostra representativa do sistema
        dados_extensao = data_gen.gerar_dados_extensao()
        
        # ============= VALIDA√á√ÉO E AN√ÅLISE DOS DADOS GERADOS =============
        # Exibe informa√ß√µes estat√≠sticas e estruturais dos dados gerados
        print(f"‚úÖ Dados sint√©ticos de extens√£o: {len(dados_extensao)} registros")
        print(f"üìä Colunas: {list(dados_extensao.columns)}")
        print(f"üìÖ Anos: {dados_extensao['ano'].min()} a {dados_extensao['ano'].max()}")
        
    except Exception as e:
        # ============= TRATAMENTO DE ERROS COM DIAGN√ìSTICO =============
        # Captura e reporta problemas na gera√ß√£o de dados sint√©ticos
        print(f"‚ùå Erro ao gerar dados sint√©ticos: {str(e)}")

def test_dados_reais():
    """
    Teste abrangente de carregamento de dados reais de arquivos Excel.
    
    Valida capacidade do sistema de carregar dados institucionais reais
    a partir de arquivos Excel estruturados, verificando integridade,
    consist√™ncia e conformidade com especifica√ß√µes t√©cnicas.
    
    VALIDA√á√ïES REALIZADAS:
    - Instancia√ß√£o correta do carregador de dados reais
    - Carregamento bem-sucedido de arquivo Excel espec√≠fico
    - Verifica√ß√£o de estrutura de colunas obrigat√≥rias
    - An√°lise de cobertura temporal dos dados
    - Valida√ß√£o de integridade dos registros
    
    ARQUIVO TESTADO:
    - dados_extensao.xlsx como representativo do sistema
    - Valida√ß√£o de exist√™ncia e acessibilidade
    - Verifica√ß√£o de formato e estrutura
    - An√°lise de conte√∫do e consist√™ncia
    
    DIAGN√ìSTICO INCLU√çDO:
    - Informa√ß√µes sobre quantidade de registros carregados
    - Lista de colunas presentes no arquivo
    - Faixa temporal dos dados institucionais
    - Identifica√ß√£o espec√≠fica de problemas de carregamento
    
    ORIENTA√á√ïES DE ERRO:
    - Sugest√µes para cria√ß√£o de dados de exemplo
    - Instru√ß√µes para resolu√ß√£o de problemas comuns
    - Refer√™ncias a utilit√°rios de suporte
    
    RETORNO:
    --------
    None
        Fun√ß√£o de teste com sa√≠da via logging console
        
    EXCE√á√ïES TRATADAS:
    ------------------
    Exception
        Erros de carregamento s√£o capturados com orienta√ß√µes
        espec√≠ficas para resolu√ß√£o e cria√ß√£o de dados
    """
    # ============= IN√çCIO DO TESTE DE DADOS REAIS =============
    # Cabe√ßalho visual para identifica√ß√£o clara da se√ß√£o de teste
    print("="*50)
    print("üìä TESTANDO DADOS REAIS")
    print("="*50)
    
    # ============= TESTE DE CARREGAMENTO COM TRATAMENTO ROBUSTO =============
    try:
        # Instancia carregador de dados reais com valida√ß√µes ativas
        data_gen = DataGeneratorReal()
        
        # Carrega dados de extens√£o como amostra representativa do sistema
        dados_extensao = data_gen.gerar_dados_extensao()
        
        # ============= VALIDA√á√ÉO E AN√ÅLISE DOS DADOS CARREGADOS =============
        # Exibe informa√ß√µes estat√≠sticas e estruturais dos dados reais
        print(f"‚úÖ Dados reais de extens√£o: {len(dados_extensao)} registros")
        print(f"üìä Colunas: {list(dados_extensao.columns)}")
        print(f"üìÖ Anos: {dados_extensao['ano'].min()} a {dados_extensao['ano'].max()}")
        
    except Exception as e:
        # ============= TRATAMENTO DE ERROS COM ORIENTA√á√ïES ESPEC√çFICAS =============
        # Captura problemas de carregamento e fornece solu√ß√µes pr√°ticas
        print(f"‚ùå Erro ao carregar dados reais: {str(e)}")
        print("üí° Dica: Execute 'python criar_planilhas_exemplo.py' para criar dados de exemplo")

def main():
    """
    Fun√ß√£o principal de execu√ß√£o do sistema de teste completo.
    
    Coordena execu√ß√£o de todos os testes de valida√ß√£o, exibe configura√ß√µes
    atuais do sistema e fornece instru√ß√µes detalhadas para migra√ß√£o
    entre modos de opera√ß√£o (sint√©tico/real).
    
    SEQU√äNCIA DE EXECU√á√ÉO:
    1. Exibi√ß√£o de configura√ß√µes atuais do sistema
    2. Teste de funcionamento de dados sint√©ticos
    3. Teste de carregamento de dados reais
    4. Instru√ß√µes detalhadas para migra√ß√£o
    5. Documenta√ß√£o de estrutura necess√°ria
    
    CONFIGURA√á√ïES EXIBIDAS:
    - USE_REAL_DATA: modo de opera√ß√£o atual
    - VALIDAR_DADOS: n√≠vel de valida√ß√£o ativo
    - MOSTRAR_LOGS: verbosidade do sistema
    - USAR_DADOS_BACKUP: estrat√©gia de fallback
    
    INSTRU√á√ïES FORNECIDAS:
    - Passo-a-passo para cria√ß√£o de dados de exemplo
    - Procedimentos para substitui√ß√£o por dados reais
    - Configura√ß√µes necess√°rias para ativa√ß√£o
    - Lista completa de arquivos obrigat√≥rios
    
    OBJETIVO DA FUN√á√ÉO:
    Facilitar diagn√≥stico completo do sistema, valida√ß√£o de
    configura√ß√µes e orienta√ß√£o para migra√ß√£o entre modos de
    opera√ß√£o com instru√ß√µes pr√°ticas e espec√≠ficas.
    
    RETORNO:
    --------
    None
        Fun√ß√£o principal com sa√≠da via logging console
    """
    # ============= CABE√áALHO E IDENTIFICA√á√ÉO DO SISTEMA DE TESTE =============
    print("üöÄ SISTEMA DE TESTE - DADOS SINT√âTICOS vs REAIS")
    print("="*60)
    
    # ============= EXIBI√á√ÉO DE CONFIGURA√á√ïES ATUAIS =============
    # Mostra estado atual das configura√ß√µes para diagn√≥stico
    print(f"üìã Configura√ß√£o atual: USE_REAL_DATA = {config.USE_REAL_DATA}")
    print(f"üìã Validar dados: {config.VALIDAR_DADOS}")
    print(f"üìã Mostrar logs: {config.MOSTRAR_LOGS}")
    print(f"üìã Usar backup: {config.USAR_DADOS_BACKUP}")
    
    # ============= EXECU√á√ÉO DOS TESTES DE VALIDA√á√ÉO =============
    # Testar dados sint√©ticos
    test_dados_sinteticos()
    
    # Testar dados reais
    test_dados_reais()
    
    # ============= INSTRU√á√ïES DETALHADAS PARA MIGRA√á√ÉO =============
    # Fornece orienta√ß√µes passo-a-passo para uso de dados reais
    print("\n" + "="*60)
    print("üìñ INSTRU√á√ïES PARA USAR DADOS REAIS:")
    print("="*60)
    print("1. Execute: python criar_planilhas_exemplo.py")
    print("2. Substitua os arquivos na pasta 'dados/' pelos seus dados reais")
    print("3. Altere USE_REAL_DATA = True no arquivo config.py")
    print("4. Reinicie o sistema Streamlit")
    print("5. Verifique se os dados foram carregados corretamente")
    
    # ============= DOCUMENTA√á√ÉO DE ESTRUTURA OBRIGAT√ìRIA =============
    # Lista completa de arquivos necess√°rios para opera√ß√£o com dados reais
    print("\nüìù ESTRUTURA NECESS√ÅRIA DOS ARQUIVOS:")
    print("- dados/dados_extensao.xlsx")
    print("- dados/dados_ensino.xlsx")
    print("- dados/dados_pesquisa.xlsx")
    print("- dados/dados_assistencia.xlsx")
    print("- dados/dados_auditoria.xlsx")
    print("- dados/dados_mundo_trabalho.xlsx")
    print("- dados/dados_orcamento.xlsx")
    print("- dados/dados_ouvidoria.xlsx")
    print("- dados/dados_servidores.xlsx")

# ============= PONTO DE ENTRADA PRINCIPAL DO SCRIPT =============
# Executa fun√ß√£o principal quando script √© chamado diretamente
if __name__ == "__main__":
    main()

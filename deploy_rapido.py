#!/usr/bin/env python3
"""
=============================================================================
SCRIPT SIMPLIFICADO PARA DEPLOY R√ÅPIDO - SISTEMA DASHBOARD IFPB-CZ
=============================================================================

Este script implementa cria√ß√£o automatizada de pacote m√≠nimo e otimizado
para deploy r√°pido do Sistema Dashboard IFPB-CZ, incluindo apenas arquivos
essenciais para funcionamento b√°sico em ambiente de produ√ß√£o, reduzindo
tempo de upload e complexidade de instala√ß√£o em servidores.

FUNCIONALIDADES PRINCIPAIS:
---------------------------
- Cria√ß√£o automatizada de pacote ZIP compactado
- Sele√ß√£o inteligente de arquivos essenciais m√≠nimos
- Exclus√£o autom√°tica de cache e arquivos desnecess√°rios
- Compress√£o otimizada para redu√ß√£o de tamanho
- Timestamp autom√°tico para versionamento de deploys
- Valida√ß√£o de integridade antes da compacta√ß√£o

ESTRAT√âGIA DE DEPLOY R√ÅPIDO:
----------------------------
- Arquivos m√≠nimos: apenas componentes cr√≠ticos
- Pastas essenciais: estrutura funcional b√°sica
- Exclus√£o de cache: __pycache__ e .pyc removidos
- Compress√£o m√°xima: ZIP_DEFLATED para menor tamanho
- Nomenclatura versionada: timestamp para identifica√ß√£o

ARQUIVOS ESSENCIAIS INCLU√çDOS:
------------------------------
- app.py: aplica√ß√£o principal Streamlit
- requirements.txt: depend√™ncias cr√≠ticas
- config.py: configura√ß√µes do sistema
- README.md: documenta√ß√£o de instala√ß√£o

PASTAS ESSENCIAIS INCLU√çDAS:
----------------------------
- modules/: todos os m√≥dulos funcionais do dashboard
- .streamlit/: configura√ß√µes espec√≠ficas do framework
- logo-ifpb/: recursos visuais institucionais

OTIMIZA√á√ïES IMPLEMENTADAS:
--------------------------
- Exclus√£o de __pycache__: remo√ß√£o de cache Python
- Filtro de .pyc: elimina√ß√£o de bytecode compilado
- Compress√£o DEFLATED: m√°xima redu√ß√£o de tamanho
- Estrutura m√≠nima: apenas arquivos funcionais cr√≠ticos

VALIDA√á√ïES DE SEGURAN√áA:
------------------------
- Verifica√ß√£o de exist√™ncia antes da inclus√£o
- Tratamento de exce√ß√µes durante compacta√ß√£o
- Relat√≥rio de arquivos inclu√≠dos com sucesso
- C√°lculo de tamanho final do pacote

PROCESSO DE CRIA√á√ÉO:
--------------------
1. Gera√ß√£o de nome √∫nico com timestamp
2. Verifica√ß√£o individual de arquivos essenciais
3. Inclus√£o seletiva de pastas com filtros
4. Exclus√£o autom√°tica de cache e tempor√°rios
5. Compacta√ß√£o otimizada com ZIP_DEFLATED
6. Relat√≥rio de resultado e tamanho final

NOMENCLATURA DE ARQUIVOS:
-------------------------
Formato: dashboard-deploy-rapido-YYYYMMDD-HHMM.zip
Exemplo: dashboard-deploy-rapido-20240730-1425.zip

VANTAGENS DO DEPLOY R√ÅPIDO:
---------------------------
- Upload mais r√°pido: arquivo menor
- Instala√ß√£o simplificada: menos arquivos
- Menor complexidade: estrutura m√≠nima
- Funcionalidade completa: todos os recursos principais
- Versionamento autom√°tico: identifica√ß√£o por timestamp

OBJETIVO:
---------
Facilitar deploys r√°pidos e eficientes do Sistema Dashboard
IFPB-CZ em ambientes de produ√ß√£o, reduzindo tempo de upload
e mantendo funcionalidade completa com estrutura m√≠nima
essencial para opera√ß√£o adequada.

USO:
----
python deploy_rapido.py

SA√çDA:
------
Arquivo ZIP compactado pronto para upload no servidor

DEPEND√äNCIAS:
-------------
- os: manipula√ß√£o de sistema de arquivos
- zipfile: cria√ß√£o e compress√£o de arquivos ZIP
- datetime: gera√ß√£o de timestamps para versionamento

AUTOR: Sistema Dashboard IFPB-CZ - NAI
DATA: 2024
=============================================================================
"""

import os
import zipfile
from datetime import datetime

def criar_deploy_rapido():
    """
    Cria√ß√£o automatizada de pacote m√≠nimo para deploy r√°pido do sistema.
    
    Esta fun√ß√£o implementa processo completo de cria√ß√£o de pacote ZIP
    otimizado para deploy r√°pido do Sistema Dashboard IFPB-CZ, incluindo
    apenas arquivos e pastas essenciais para funcionamento b√°sico,
    com compress√£o m√°xima e exclus√£o de arquivos desnecess√°rios.
    
    PROCESSO DE CRIA√á√ÉO:
    1. Gera√ß√£o de nome √∫nico com timestamp atual
    2. Defini√ß√£o de listas de arquivos e pastas essenciais
    3. Cria√ß√£o de arquivo ZIP com compress√£o otimizada
    4. Inclus√£o seletiva de arquivos com valida√ß√£o
    5. Processamento de pastas com filtros de exclus√£o
    6. C√°lculo de tamanho final e relat√≥rio de resultado
    
    ARQUIVOS INCLU√çDOS:
    - app.py: aplica√ß√£o principal do Streamlit
    - requirements.txt: depend√™ncias cr√≠ticas do Python
    - config.py: configura√ß√µes do sistema
    - README.md: documenta√ß√£o de instala√ß√£o
    
    PASTAS INCLU√çDAS:
    - modules/: todos os m√≥dulos funcionais completos
    - .streamlit/: configura√ß√µes espec√≠ficas do framework
    - logo-ifpb/: recursos visuais institucionais
    
    OTIMIZA√á√ïES APLICADAS:
    - Compress√£o ZIP_DEFLATED: m√°xima redu√ß√£o de tamanho
    - Exclus√£o de __pycache__: remo√ß√£o de cache Python
    - Filtro de .pyc: elimina√ß√£o de bytecode compilado
    - Valida√ß√£o de exist√™ncia: apenas arquivos v√°lidos
    
    FILTROS DE EXCLUS√ÉO:
    - Diret√≥rios __pycache__: cache Python desnecess√°rio
    - Arquivos .pyc: bytecode compilado tempor√°rio
    - Estruturas de cache: otimiza√ß√£o de tamanho
    
    NOMENCLATURA GERADA:
    Formato: dashboard-deploy-rapido-YYYYMMDD-HHMM.zip
    Timestamp: identifica√ß√£o √∫nica por data/hora
    
    RETORNO:
    --------
    None
        Fun√ß√£o de cria√ß√£o com sa√≠da via logging console
        Arquivo ZIP criado no diret√≥rio atual
        
    SA√çDAS GERADAS:
    ---------------
    - Nome do arquivo ZIP sendo criado
    - Status de inclus√£o de cada arquivo/pasta
    - Tamanho final do pacote em MB
    - Confirma√ß√£o de prontid√£o para upload
    - Tratamento de erros durante cria√ß√£o
    """
    # Gerar nome √∫nico do arquivo ZIP com timestamp atual
    nome_zip = f"dashboard-deploy-rapido-{datetime.now().strftime('%Y%m%d-%H%M')}.zip"
    
    # =============================================================================
    # DEFINI√á√ÉO DE ARQUIVOS ESSENCIAIS M√çNIMOS PARA FUNCIONAMENTO
    # =============================================================================
    
    # Lista de arquivos cr√≠ticos obrigat√≥rios para opera√ß√£o b√°sica
    arquivos_essenciais = [
        'app.py',           # Aplica√ß√£o principal Streamlit
        'requirements.txt', # Depend√™ncias cr√≠ticas Python
        'config.py',        # Configura√ß√µes do sistema
        'README.md'         # Documenta√ß√£o de instala√ß√£o
    ]
    
    # =============================================================================
    # DEFINI√á√ÉO DE PASTAS ESSENCIAIS M√çNIMAS PARA ESTRUTURA FUNCIONAL
    # =============================================================================
    
    # Lista de pastas cr√≠ticas para funcionamento completo
    pastas_essenciais = [
        'modules',      # M√≥dulos funcionais do dashboard
        '.streamlit',   # Configura√ß√µes espec√≠ficas do framework
        'logo-ifpb'     # Recursos visuais institucionais
    ]
    
    # Exibir in√≠cio do processo de cria√ß√£o
    print(f"üöÄ Criando deploy r√°pido: {nome_zip}")
    
    # =============================================================================
    # PROCESSO DE CRIA√á√ÉO DO PACOTE ZIP OTIMIZADO
    # =============================================================================
    
    try:
        # Criar arquivo ZIP com compress√£o m√°xima
        with zipfile.ZipFile(nome_zip, 'w', zipfile.ZIP_DEFLATED) as zipf:
            
            # =============================================================================
            # INCLUS√ÉO DE ARQUIVOS ESSENCIAIS COM VALIDA√á√ÉO
            # =============================================================================
            
            # Adicionar arquivos essenciais individualmente
            for arquivo in arquivos_essenciais:
                if os.path.exists(arquivo):
                    # Incluir arquivo validado no pacote
                    zipf.write(arquivo)
                    print(f"‚úÖ {arquivo}")
            
            # =============================================================================
            # INCLUS√ÉO DE PASTAS COM FILTROS DE OTIMIZA√á√ÉO
            # =============================================================================
            
            # Adicionar pastas essenciais com filtros de exclus√£o
            for pasta in pastas_essenciais:
                if os.path.exists(pasta):
                    # Percorrer estrutura de pastas recursivamente
                    for root, dirs, files in os.walk(pasta):
                        # Aplicar filtro de exclus√£o para cache Python
                        dirs[:] = [d for d in dirs if d != '__pycache__']
                        
                        # Processar arquivos individuais com filtros
                        for arquivo in files:
                            # Excluir bytecode compilado Python
                            if not arquivo.endswith('.pyc'):
                                caminho = os.path.join(root, arquivo)
                                zipf.write(caminho)
                    print(f"‚úÖ {pasta}/")
        
        # =============================================================================
        # RELAT√ìRIO FINAL DE CRIA√á√ÉO E ESTAT√çSTICAS
        # =============================================================================
        
        # Calcular tamanho final do pacote em MB
        tamanho = os.path.getsize(nome_zip) / 1024 / 1024
        print(f"‚úÖ Deploy criado: {nome_zip} ({tamanho:.1f} MB)")
        print("üöÄ Pronto para upload no servidor!")
        
    except Exception as e:
        # Tratamento de erros durante cria√ß√£o do pacote
        print(f"‚ùå Erro: {e}")

if __name__ == "__main__":
    """
    Ponto de entrada principal do script de deploy r√°pido.
    
    Esta se√ß√£o coordena a execu√ß√£o completa do processo de cria√ß√£o
    de pacote m√≠nimo para deploy r√°pido do Sistema Dashboard IFPB-CZ,
    garantindo inclus√£o apenas de arquivos essenciais com otimiza√ß√µes
    de tamanho e tempo de upload.
    
    EXECU√á√ÉO REALIZADA:
    1. Verifica√ß√£o de execu√ß√£o direta do script
    2. Chamada da fun√ß√£o principal de cria√ß√£o de pacote
    3. Processo completo de compacta√ß√£o otimizada
    4. Gera√ß√£o de arquivo ZIP pronto para deploy
    
    FINALIDADE:
    -----------
    Permitir execu√ß√£o independente do script para cria√ß√£o
    r√°pida de pacote de deploy, facilitando uploads eficientes
    e instala√ß√µes simplificadas em servidores de produ√ß√£o.
    
    PROCESSO:
    ---------
    - Execu√ß√£o direta: python deploy_rapido.py
    - Cria√ß√£o autom√°tica: pacote ZIP otimizado
    - Compress√£o m√°xima: redu√ß√£o de tamanho
    - Upload eficiente: arquivo m√≠nimo funcional
    """
    criar_deploy_rapido()
